[
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "html",
          "value": "<img src=\"./logo-full.png\" style=\"max-width: 255px; margin: 10px 0;\" />"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Write more robust and understandable programs."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Statebot hopes to make "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://en.wikipedia.org/wiki/Finite-state_machine",
              "children": [
                {
                  "type": "text",
                  "value": "Finite State Machines"
                }
              ]
            },
            {
              "type": "text",
              "value": " (FSMs) a little more accessible."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "You're reading the documentation. Other exits are:"
            }
          ]
        },
        {
          "type": "list",
          "ordered": false,
          "start": null,
          "spread": false,
          "children": [
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "link",
                      "title": null,
                      "url": "https://github.com/shuckster/statebot/blob/master/README.md",
                      "children": [
                        {
                          "type": "text",
                          "value": "README file"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "The "
                    },
                    {
                      "type": "link",
                      "title": null,
                      "url": "https://github.com/shuckster/statebot",
                      "children": [
                        {
                          "type": "text",
                          "value": "Github Repo"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "inlineCode",
                      "value": "useStatebot"
                    },
                    {
                      "type": "text",
                      "value": " with "
                    },
                    {
                      "type": "link",
                      "title": null,
                      "url": "https://github.com/shuckster/statebot-react-hooks",
                      "children": [
                        {
                          "type": "text",
                          "value": "React"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " and "
                    },
                    {
                      "type": "link",
                      "title": null,
                      "url": "https://github.com/shuckster/statebot-mithril-hooks",
                      "children": [
                        {
                          "type": "text",
                          "value": "Mithril"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " Hooks"
                    }
                  ]
                }
              ]
            },
            {
              "type": "listItem",
              "spread": false,
              "checked": null,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "text",
                      "value": "The shell-script version, "
                    },
                    {
                      "type": "link",
                      "title": null,
                      "url": "https://github.com/shuckster/statebot-sh",
                      "children": [
                        {
                          "type": "text",
                          "value": "Statebot-sh"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Statebot was written by "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://github.com/shuckster/",
              "children": [
                {
                  "type": "text",
                  "value": "Conan Theobald"
                }
              ]
            },
            {
              "type": "text",
              "value": " and\nis "
            },
            {
              "type": "link",
              "title": null,
              "url": "../LICENSE",
              "children": [
                {
                  "type": "text",
                  "value": "MIT licensed"
                }
              ]
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Jump right in"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Play around with an example that uses React in "
            },
            {
              "type": "link",
              "title": null,
              "url": "https://codesandbox.io/s/statebot-react-ot3xe?file=/src/Loader.js",
              "children": [
                {
                  "type": "text",
                  "value": "this CodeSandbox"
                }
              ]
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "You can install Statebot into your "
            },
            {
              "type": "inlineCode",
              "value": "npm"
            },
            {
              "type": "text",
              "value": " project:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "sh",
          "meta": null,
          "value": "npm i statebot"
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "import statebot from 'statebot'"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Or non-"
            },
            {
              "type": "inlineCode",
              "value": "npm"
            },
            {
              "type": "text",
              "value": " project:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "<script src=\"https://unpkg.com/statebot@2.8.0/dist/browser/statebot.min.js\"></script>"
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "const { Statebot } = statebot\n// Make machines with Statebot()\n\nconst { isStatebot, routeIsPossible, assertRoute } = statebot\n// These are assertion helpers you can use for testing"
        },
        {
          "type": "heading",
          "depth": 3,
          "children": [
            {
              "type": "text",
              "value": "Open the developer-console :)"
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "I've included Statebot in this page. Open the developer-console to\nfollow along with the examples below:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var machine = Statebot('promise-like', {\n  chart: `\n    // This one will behave a bit like a Promise\n    idle -> pending ->\n      resolved | rejected\n\n    // ...and we're done\n    resolved -> done\n    rejected -> done\n  `,\n  startIn: 'idle'\n})\n\nmachine.canTransitionTo('pending')\n// true\n\nmachine.enter('pending')\nmachine.statesAvailableFromHere()\n// [\"resolved\", \"rejected\"]"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "We can hook-up events with "
            },
            {
              "type": "link",
              "url": "#statebotfsmperformtransitions",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".performTransitions()"
                }
              ]
            },
            {
              "type": "text",
              "value": ":"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "machine.performTransitions({\n 'pending -> resolved': {\n   on: 'data-loaded'\n },\n 'pending -> rejected': {\n   on: ['timeout', 'data-error'],\n   then: (msg) => {\n     console.warn('Uh oh...', msg)\n   }\n },\n 'resolved | rejected -> done': {\n   on: 'thats-all-folks'\n }\n})\n\nmachine.emit('data-error', 'Did you hear that?')"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Here's the API:"
            }
          ]
        },
        {
          "type": "table",
          "align": [
            null,
            null,
            null
          ],
          "children": [
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "text",
                      "value": "Hitchers"
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "text",
                      "value": "Status"
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "text",
                      "value": "Actions"
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmperformtransitions",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".performTransitions()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmonevent",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onEvent()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmcantransitionto",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".canTransitionTo()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmstatesavailablefromhere",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".statesAvailableFromHere()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmemit",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".emit()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#emit-eventname-curriedargs",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".Emit()"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmontransitions",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onTransitions()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmcurrentstate",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".currentState()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmpreviousstate",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".previousState()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmhistory",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".history()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmenter",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".enter()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#enter-state-curriedargs",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".Enter()"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmonentering",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onEntering()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmonentered",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onEntered()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsminstate",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".inState()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#instate-state-outputwhentrue-curriedfnargs",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".InState()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmpause",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".pause()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmresume",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".resume()"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmonexiting",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onExiting()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmonexited",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onExited()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsminfo",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".info()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsminspect",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".inspect()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmname",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".name()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmreset",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".reset()"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "tableRow",
              "children": [
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmonswitching",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onSwitching()"
                        }
                      ]
                    },
                    {
                      "type": "text",
                      "value": " / "
                    },
                    {
                      "type": "link",
                      "url": "#statebotfsmonswitched",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".onSwitched()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": [
                    {
                      "type": "link",
                      "url": "#statebotfsmpaused",
                      "title": null,
                      "jsdoc": true,
                      "children": [
                        {
                          "type": "text",
                          "value": ".paused()"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "tableCell",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "html",
          "value": "<img src=\"./logo-small.png\" style=\"max-width: 75px; margin: 15px 0 0 5px;\" />"
        }
      ]
    },
    "tags": [
      {
        "title": "module",
        "description": null,
        "lineNumber": 105,
        "type": null,
        "name": "statebot"
      }
    ],
    "loc": {
      "start": {
        "line": 10,
        "column": 0
      },
      "end": {
        "line": 116,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 118,
          "column": 0
        },
        "end": {
          "line": 124,
          "column": 1
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/index.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "module",
    "name": "statebot",
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Create a "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsm",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotFsm"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " "
                  },
                  {
                    "type": "inlineCode",
                    "value": "object"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebot",
              "lineNumber": 3
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 4,
              "name": null
            },
            {
              "title": "example",
              "description": "var machine = Statebot('lemming', {\n  chart: `\n    walking -> (digging | building | falling) ->\n      walking\n\n    falling -> splatting\n    walking -> exiting\n  `\n})",
              "lineNumber": 5
            },
            {
              "title": "param",
              "description": "Give your Statebot a name. Used for logging and by {@link #statebotassertroute|assertRoute()}.",
              "lineNumber": 16,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 18,
              "type": {
                "type": "NameExpression",
                "name": "statebotOptions"
              },
              "name": "options"
            }
          ],
          "loc": {
            "start": {
              "line": 184,
              "column": 0
            },
            "end": {
              "line": 203,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 205,
                "column": 0
              },
              "end": {
                "line": 1751,
                "column": 1
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('lemming', {\n  chart: `\n    walking -> (digging | building | falling) ->\n      walking\n\n    falling -> splatting\n    walking -> exiting\n  `\n})"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 16,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Give your Statebot a name. Used for logging and by "
                      },
                      {
                        "type": "link",
                        "url": "#statebotassertroute",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": "assertRoute()"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 18,
              "type": {
                "type": "NameExpression",
                "name": "statebotOptions"
              }
            }
          ],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebot",
          "kind": "function",
          "name": "Statebot",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebot",
              "kind": "module"
            },
            {
              "name": "Statebot",
              "kind": "function"
            }
          ],
          "namespace": "statebotStatebot"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Tests that an object is a "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsm",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotFsm"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebot",
              "lineNumber": 3
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 4,
              "name": null
            },
            {
              "title": "example",
              "description": "var machine = Statebot(...)\n\nisStatebot(machine)\n// true",
              "lineNumber": 5
            },
            {
              "title": "param",
              "description": "The object to test.",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "any"
              },
              "name": "object"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 12,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 1818,
              "column": 0
            },
            "end": {
              "line": 1831,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1833,
                "column": 0
              },
              "end": {
                "line": 1838,
                "column": 1
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot(...)\n\nisStatebot(machine)\n// true"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "object",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The object to test."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "any"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebot",
          "kind": "function",
          "name": "isStatebot",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebot",
              "kind": "module"
            },
            {
              "name": "isStatebot",
              "kind": "function"
            }
          ],
          "namespace": "statebotisStatebot"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Assert that a certain route can be followed by a\n"
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsm",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotFsm"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "This merely tests that a certain path can be taken through a\nstate-machine. It doesn't assert that the states are moved-through\nwhile the machine is working, as with\n"
                  },
                  {
                    "type": "link",
                    "url": "#statebotassertroute",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "assertRoute()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebot",
              "lineNumber": 9
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 10,
              "name": null
            },
            {
              "title": "param",
              "description": "The machine to test the route on.",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "statebotFsm"
              },
              "name": "machine"
            },
            {
              "title": "param",
              "description": "The route to test as an arrow-delimited string:\n\n `\n \"idle -> pending -> success -> done\"\n `",
              "lineNumber": 13,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              },
              "name": "route"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 19,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot(...)\n\nrouteIsPossible(machine,\n  'walking -> falling -> splatting -> walking'\n)\n// false",
              "lineNumber": 21
            }
          ],
          "loc": {
            "start": {
              "line": 23,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 53,
                "column": 0
              },
              "end": {
                "line": 73,
                "column": 1
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/assertions.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot(...)\n\nrouteIsPossible(machine,\n  'walking -> falling -> splatting -> walking'\n)\n// false"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "machine",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The machine to test the route on."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "statebotFsm"
              }
            },
            {
              "title": "param",
              "name": "route",
              "lineNumber": 13,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The route to test as an arrow-delimited string:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": " \"idle -> pending -> success -> done\"\n"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebot",
          "kind": "function",
          "name": "routeIsPossible",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebot",
              "kind": "module"
            },
            {
              "name": "routeIsPossible",
              "kind": "function"
            }
          ],
          "namespace": "statebotrouteIsPossible"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Assert that a "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsm",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotFsm"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " traced the route specified."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Whereas "
                  },
                  {
                    "type": "link",
                    "url": "#statebotrouteispossible",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "routeIsPossible()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " only checks\nthat a particular route can be followed, "
                  },
                  {
                    "type": "inlineCode",
                    "value": "assertRoute"
                  },
                  {
                    "type": "text",
                    "value": " will hook-into\na machine and wait for it to trace the specified path within a\ntimeout period."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebot",
              "lineNumber": 8
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 9,
              "name": null
            },
            {
              "title": "async",
              "description": null,
              "lineNumber": 10
            },
            {
              "title": "param",
              "description": "The machine to run the assertion on.",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "statebotFsm"
              },
              "name": "machine"
            },
            {
              "title": "param",
              "description": "The expected route as an arrow-delimited string:\n\n `\n \"idle -> pending -> success -> done\"\n `",
              "lineNumber": 13,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              },
              "name": "expectedRoute"
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 19,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "assertRouteOptions"
                }
              },
              "name": "options"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 20,
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot(...)\n\nassertRoute(\n  machine, 'prepare -> debounce -> sending -> done -> idle',\n  {\n    description: 'Email sent with no issues',\n    fromState: 'idle',\n    timeoutInMs: 1000 * 20,\n    permittedDeviations: 0,\n    logLevel: 3\n  }\n)\n.then(() => console.log('Assertion passed!'))\n.catch(err => console.error(`Whoops: ${err}`))\n\nmachine.enter('idle')",
              "lineNumber": 22
            }
          ],
          "loc": {
            "start": {
              "line": 98,
              "column": 0
            },
            "end": {
              "line": 137,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 139,
                "column": 0
              },
              "end": {
                "line": 267,
                "column": 1
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/assertions.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot(...)\n\nassertRoute(\n  machine, 'prepare -> debounce -> sending -> done -> idle',\n  {\n    description: 'Email sent with no issues',\n    fromState: 'idle',\n    timeoutInMs: 1000 * 20,\n    permittedDeviations: 0,\n    logLevel: 3\n  }\n)\n.then(() => console.log('Assertion passed!'))\n.catch(err => console.error(`Whoops: ${err}`))\n\nmachine.enter('idle')"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "machine",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The machine to run the assertion on."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "statebotFsm"
              }
            },
            {
              "title": "param",
              "name": "expectedRoute",
              "lineNumber": 13,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The expected route as an arrow-delimited string:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": " \"idle -> pending -> success -> done\"\n"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            },
            {
              "title": "param",
              "name": "options",
              "lineNumber": 19,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "assertRouteOptions"
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Promise"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebot",
          "kind": "function",
          "async": true,
          "name": "assertRoute",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebot",
              "kind": "module"
            },
            {
              "name": "assertRoute",
              "kind": "function"
            }
          ],
          "namespace": "statebotassertRoute"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Decompose a "
                  },
                  {
                    "type": "link",
                    "url": "statebotChart",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotChart"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " into an object of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "states"
                  },
                  {
                    "type": "text",
                    "value": ", "
                  },
                  {
                    "type": "inlineCode",
                    "value": "routes"
                  },
                  {
                    "type": "text",
                    "value": ",\nand "
                  },
                  {
                    "type": "inlineCode",
                    "value": "transitions"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Statebot() uses this internally to parse charts. Exposed for debugging."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebot",
              "lineNumber": 6
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 7,
              "name": null
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "statebotChart"
              },
              "name": "chart"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            },
            {
              "title": "example",
              "description": "var { states, routes, transitions } = decomposeChart`\n  pending ->\n    success | failure\n`\n// states = ['pending', 'success', 'failure']\n// routes = [ 'pending->success', 'pending->failure']\n// transitions = [\n//   ['pending', 'success'],\n//   ['pending', 'failure']\n// ]",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 46,
              "column": 0
            },
            "end": {
              "line": 68,
              "column": 3
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 70,
                "column": 0
              },
              "end": {
                "line": 105,
                "column": 1
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/parsing.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var { states, routes, transitions } = decomposeChart`\n  pending ->\n    success | failure\n`\n// states = ['pending', 'success', 'failure']\n// routes = [ 'pending->success', 'pending->failure']\n// transitions = [\n//   ['pending', 'success'],\n//   ['pending', 'failure']\n// ]"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "chart",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "statebotChart"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "Object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebot",
          "kind": "function",
          "name": "decomposeChart",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebot",
              "kind": "module"
            },
            {
              "name": "decomposeChart",
              "kind": "function"
            }
          ],
          "namespace": "statebotdecomposeChart"
        }
      ]
    },
    "path": [
      {
        "name": "statebot",
        "kind": "module"
      }
    ],
    "namespace": "statebot"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Options for creating a Statebot."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "statebotOptions"
      },
      {
        "title": "property",
        "description": "The state-chart.",
        "lineNumber": 4,
        "type": {
          "type": "NameExpression",
          "name": "statebotChart"
        },
        "name": "chart"
      },
      {
        "title": "property",
        "description": "The state in which to start. If unspecified, the first state in the\n chart will be used.",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "startIn",
        "default": "auto"
      },
      {
        "title": "property",
        "description": "How noisy the logging is, from 1 to 3:\n ```\n 1) console.warn\n 2) console.warn/log/table\n 3) console.warn/log/table/info\n ```\n `3` is the default. Argument type-errors will always `throw`.",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "logLevel",
        "default": "3"
      },
      {
        "title": "property",
        "description": "Limit how much history the state-machine keeps. Accessed via\n {@link #statebotfsmhistory|statebotFsm#history()}.",
        "lineNumber": 17,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "historyLimit",
        "default": "2"
      },
      {
        "title": "property",
        "description": "If you wish to have your Statebots listen to events coming from\n a shared EventEmitter, you can pass it in here. The `emit()`/`onEvent()`/\n `performTransitions()` methods will use it.\n\n It should have the same signature as {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}.\n\n - Since Statebot 2.5.0 {@link https://npmjs.com/mitt|mitt} is also compatible.\n - Since Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is used internally.",
        "lineNumber": 20,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "events"
          }
        },
        "name": "events"
      }
    ],
    "loc": {
      "start": {
        "line": 11,
        "column": 0
      },
      "end": {
        "line": 40,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 151,
          "column": 0
        },
        "end": {
          "line": 151,
          "column": 30
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "chart",
        "lineNumber": 4,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The state-chart."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "NameExpression",
          "name": "statebotChart"
        }
      },
      {
        "title": "property",
        "name": "startIn",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "The state in which to start. If unspecified, the first state in the\nchart will be used."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      },
      {
        "title": "property",
        "name": "logLevel",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "How noisy the logging is, from 1 to 3:"
                }
              ]
            },
            {
              "type": "code",
              "lang": null,
              "meta": null,
              "value": "1) console.warn\n2) console.warn/log/table\n3) console.warn/log/table/info"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "inlineCode",
                  "value": "3"
                },
                {
                  "type": "text",
                  "value": " is the default. Argument type-errors will always "
                },
                {
                  "type": "inlineCode",
                  "value": "throw"
                },
                {
                  "type": "text",
                  "value": "."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      },
      {
        "title": "property",
        "name": "historyLimit",
        "lineNumber": 17,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Limit how much history the state-machine keeps. Accessed via\n"
                },
                {
                  "type": "link",
                  "url": "#statebotfsmhistory",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": "statebotFsm#history()"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": "."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      },
      {
        "title": "property",
        "name": "events",
        "lineNumber": 20,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "If you wish to have your Statebots listen to events coming from\na shared EventEmitter, you can pass it in here. The "
                },
                {
                  "type": "inlineCode",
                  "value": "emit()"
                },
                {
                  "type": "text",
                  "value": "/"
                },
                {
                  "type": "inlineCode",
                  "value": "onEvent()"
                },
                {
                  "type": "text",
                  "value": "/\n"
                },
                {
                  "type": "inlineCode",
                  "value": "performTransitions()"
                },
                {
                  "type": "text",
                  "value": " methods will use it."
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "It should have the same signature as "
                },
                {
                  "type": "link",
                  "url": "https://nodejs.org/api/events.html#events_class_eventemitter",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": "EventEmitter"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": "."
                }
              ]
            },
            {
              "type": "list",
              "ordered": false,
              "start": null,
              "spread": false,
              "children": [
                {
                  "type": "listItem",
                  "spread": false,
                  "checked": null,
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Since Statebot 2.5.0 "
                        },
                        {
                          "type": "link",
                          "url": "https://npmjs.com/mitt",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "mitt"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " is also compatible."
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "listItem",
                  "spread": false,
                  "checked": null,
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "type": "text",
                          "value": "Since Statebot 2.6.0 "
                        },
                        {
                          "type": "link",
                          "url": "https://npmjs.com/mitt",
                          "title": null,
                          "jsdoc": true,
                          "children": [
                            {
                              "type": "text",
                              "value": "mitt"
                            }
                          ]
                        },
                        {
                          "type": "text",
                          "value": " is used internally."
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "events"
          }
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "statebotOptions",
    "type": {
      "type": "NameExpression",
      "name": "Object"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "statebotOptions",
        "kind": "typedef"
      }
    ],
    "namespace": "statebotOptions"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A description of all the states in a machine, plus all of the\npermitted transitions between them."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "This is defined using a "
            },
            {
              "type": "inlineCode",
              "value": "string"
            },
            {
              "type": "text",
              "value": " or an "
            },
            {
              "type": "inlineCode",
              "value": "array"
            },
            {
              "type": "text",
              "value": " of strings, but\n"
            },
            {
              "type": "link",
              "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": "Template Literals"
                }
              ]
            },
            {
              "type": "text",
              "value": "\nare much more convenient."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "An arrow "
            },
            {
              "type": "inlineCode",
              "value": "->"
            },
            {
              "type": "text",
              "value": " configures a "
            },
            {
              "type": "strong",
              "children": [
                {
                  "type": "text",
                  "value": "permitted transition"
                }
              ]
            },
            {
              "type": "text",
              "value": " between two states:"
            }
          ]
        },
        {
          "type": "code",
          "lang": null,
          "meta": null,
          "value": "from-state -> to-state"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "It's the only operator needed to build any chart:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending -> resolved\n  pending -> rejected\n  resolved -> done\n  rejected -> done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "The \"OR\" operator "
            },
            {
              "type": "inlineCode",
              "value": "|"
            },
            {
              "type": "text",
              "value": " can help us remove some redundancy from the above example:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending -> resolved | rejected\n  resolved | rejected -> done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "In both charts, "
            },
            {
              "type": "inlineCode",
              "value": "pending"
            },
            {
              "type": "text",
              "value": " can transition to "
            },
            {
              "type": "inlineCode",
              "value": "resolved"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "rejected"
            },
            {
              "type": "text",
              "value": ", and\n"
            },
            {
              "type": "inlineCode",
              "value": "resolved"
            },
            {
              "type": "text",
              "value": " or "
            },
            {
              "type": "inlineCode",
              "value": "rejected"
            },
            {
              "type": "text",
              "value": " can both transition to "
            },
            {
              "type": "inlineCode",
              "value": "done"
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "We can streamline this even further:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending -> (resolved | rejected) -> done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Again, this is exactly equivalent to the previous two examples."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Notice in this one that we have parentheses "
            },
            {
              "type": "inlineCode",
              "value": "("
            },
            {
              "type": "text",
              "value": " "
            },
            {
              "type": "inlineCode",
              "value": ")"
            },
            {
              "type": "text",
              "value": " surrounding "
            },
            {
              "type": "inlineCode",
              "value": "resolved"
            },
            {
              "type": "text",
              "value": "\nand "
            },
            {
              "type": "inlineCode",
              "value": "rejected"
            },
            {
              "type": "text",
              "value": ". They are actually completely ignored by the parser, and\nyou can use them as you please to help make your charts more readable."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A chart works exactly the same without them:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending -> resolved | rejected -> done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Charts can also be split across multiple-lines:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending ->\n  resolved |\n  rejected ->\n  done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Notice that all white-space is ignored on either side of the "
            },
            {
              "type": "inlineCode",
              "value": "->"
            },
            {
              "type": "text",
              "value": "\nand "
            },
            {
              "type": "inlineCode",
              "value": "|"
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "inlineCode",
              "value": "// Comments of this kind are allowed, too:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var promiseLikeChart = `\n  pending -> // Where do we go from here?\n    (resolved | rejected) -> // Ah, yes\n\n  // And now we're all finished\n  done\n`"
        },
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "Finally, here's a more full example:"
            }
          ]
        },
        {
          "type": "code",
          "lang": "js",
          "meta": null,
          "value": "var dragDropChart = `\n  idle ->\n    drag-detect ->\n      (dragging | clicked)\n\n  // Just a click, bail-out!\n  clicked -> idle\n\n  // Drag detected!\n  dragging ->\n    drag-wait -> dragged -> drag-wait\n\n  // Drag finished...\n  (drag-wait | dragged) ->\n    (drag-done | drag-cancel) ->\n      idle\n`"
        }
      ]
    },
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 106,
        "type": {
          "type": "UnionType",
          "elements": [
            {
              "type": "NameExpression",
              "name": "string"
            },
            {
              "type": "TypeApplication",
              "expression": {
                "type": "NameExpression",
                "name": "Array"
              },
              "applications": [
                {
                  "type": "NameExpression",
                  "name": "string"
                }
              ]
            }
          ]
        },
        "name": "statebotChart"
      }
    ],
    "loc": {
      "start": {
        "line": 42,
        "column": 0
      },
      "end": {
        "line": 149,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 151,
          "column": 0
        },
        "end": {
          "line": 151,
          "column": 30
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "statebotChart",
    "type": {
      "type": "UnionType",
      "elements": [
        {
          "type": "NameExpression",
          "name": "string"
        },
        {
          "type": "TypeApplication",
          "expression": {
            "type": "NameExpression",
            "name": "Array"
          },
          "applications": [
            {
              "type": "NameExpression",
              "name": "string"
            }
          ]
        }
      ]
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "statebotChart",
        "kind": "typedef"
      }
    ],
    "namespace": "statebotChart"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "text",
              "value": "A state-machine object created by\n"
            },
            {
              "type": "link",
              "url": "#statebotstatebot",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": "Statebot()"
                }
              ]
            },
            {
              "type": "text",
              "value": "."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 3,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "statebotFsm"
      }
    ],
    "loc": {
      "start": {
        "line": 718,
        "column": 2
      },
      "end": {
        "line": 722,
        "column": 5
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 724,
          "column": 2
        },
        "end": {
          "line": 1750,
          "column": 3
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "statebotFsm",
    "type": {
      "type": "NameExpression",
      "name": "Object"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Tests to see if we can transition to the specified state from\nthe "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If more than one state is specified, "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": " is returned only if\n"
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "ALL"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " states are available."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 7
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 8
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 9,
              "name": null
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 10,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              },
              "name": "states"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('game-menus', {\n  chart: `\n    loading ->\n      menu ->\n           play |\n        options |\n          sound |\n           quit\n\n    // Go back to menu\n    play | options | sound -> menu\n\n    // Can quit from main game, too\n    play -> quit\n  `\n})\n\nmachine.canTransitionTo('play')\n// false\n\nmachine.enter('menu')\nmachine.canTransitionTo(['play', 'options'])\n// true",
              "lineNumber": 12
            }
          ],
          "loc": {
            "start": {
              "line": 732,
              "column": 4
            },
            "end": {
              "line": 768,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 769,
                "column": 4
              },
              "end": {
                "line": 769,
                "column": 19
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('game-menus', {\n  chart: `\n    loading ->\n      menu ->\n           play |\n        options |\n          sound |\n           quit\n\n    // Go back to menu\n    play | options | sound -> menu\n\n    // Can quit from main game, too\n    play -> quit\n  `\n})\n\nmachine.canTransitionTo('play')\n// false\n\nmachine.enter('menu')\nmachine.canTransitionTo(['play', 'options'])\n// true"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "states",
              "lineNumber": 10,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "TypeApplication",
                    "expression": {
                      "type": "NameExpression",
                      "name": "Array"
                    },
                    "applications": [
                      {
                        "type": "NameExpression",
                        "name": "string"
                      }
                    ]
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "canTransitionTo",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "canTransitionTo",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#canTransitionTo"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the current state."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 3
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 5,
              "name": null
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('coroutine', {\n  chart: `\n    suspended -> running -> (suspended | dead)\n  `\n})\n\nmachine.currentState()\n// \"suspended\"",
              "lineNumber": 8
            }
          ],
          "loc": {
            "start": {
              "line": 771,
              "column": 4
            },
            "end": {
              "line": 788,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 789,
                "column": 4
              },
              "end": {
                "line": 789,
                "column": 16
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('coroutine', {\n  chart: `\n    suspended -> running -> (suspended | dead)\n  `\n})\n\nmachine.currentState()\n// \"suspended\""
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "currentState",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "currentState",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#currentState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Immediately emits an event, firing any listeners added using\n"
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmperformtransitions",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".performTransitions()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmonevent",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".onEvent()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": null
            },
            {
              "title": "param",
              "description": null,
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "eventName"
            },
            {
              "title": "param",
              "description": "Optional arguments to pass to listeners.",
              "lineNumber": 8,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "args"
            },
            {
              "title": "returns",
              "description": "Whether or not the event had listeners.\n\n See: {@link https://nodejs.org/api/events.html#events_emitter_emit_eventname_args|Node Events}\n for more information.\n\nStatebot imports `EventEmitter` from the\n {@link https://www.npmjs.com/package/events|events}\npackage for dealing with events in the browser.\n\nSince Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is\nused for both the browser and non-browser builds.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('basic-form', {\n  chart: `\n    idle -> sending -> redirect\n  `\n})\n\nmachine.performTransitions({\n  'idle -> sending': {\n    on: 'post-data',\n    then: (...args) => {\n      console.log('Event args: ', args)\n      // setTimeout(machine.Enter('redirect'), 5000)\n    }\n  }\n})\n\nmachine.emit('post-data', 'Hello, world!')\n// Event args: [\"Hello, world!\"]\n\nmachine.currentState()\n// \"sending\"",
              "lineNumber": 23
            }
          ],
          "loc": {
            "start": {
              "line": 791,
              "column": 4
            },
            "end": {
              "line": 836,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 837,
                "column": 4
              },
              "end": {
                "line": 837,
                "column": 8
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('basic-form', {\n  chart: `\n    idle -> sending -> redirect\n  `\n})\n\nmachine.performTransitions({\n  'idle -> sending': {\n    on: 'post-data',\n    then: (...args) => {\n      console.log('Event args: ', args)\n      // setTimeout(machine.Enter('redirect'), 5000)\n    }\n  }\n})\n\nmachine.emit('post-data', 'Hello, world!')\n// Event args: [\"Hello, world!\"]\n\nmachine.currentState()\n// \"sending\""
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "eventName",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "args",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Optional arguments to pass to listeners."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Whether or not the event had listeners."
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "See: "
                      },
                      {
                        "type": "link",
                        "url": "https://nodejs.org/api/events.html#events_emitter_emit_eventname_args",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": "Node Events"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "\nfor more information."
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Statebot imports "
                      },
                      {
                        "type": "inlineCode",
                        "value": "EventEmitter"
                      },
                      {
                        "type": "text",
                        "value": " from the\n"
                      },
                      {
                        "type": "link",
                        "url": "https://www.npmjs.com/package/events",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": "events"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "\npackage for dealing with events in the browser."
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Since Statebot 2.6.0 "
                      },
                      {
                        "type": "link",
                        "url": "https://npmjs.com/mitt",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": "mitt"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": " is\nused for both the browser and non-browser builds."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "emit",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "emit",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#emit"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a function that emits the specified event."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "(This is essentially a convenience wrapper around "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmemit",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".emit()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ".)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 5
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 6
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 7,
              "name": null
            },
            {
              "title": "param",
              "description": "The desired event to {@link #statebotfsmemit|.emit()}.",
              "lineNumber": 8,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "eventName"
            },
            {
              "title": "param",
              "description": "Arguments that will curry into the returned `emit()` function\n whenever it is called.",
              "lineNumber": 10,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "curriedArgs"
            },
            {
              "title": "returns",
              "description": "A function that emits that event.",
              "lineNumber": 13,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('traffic-lights', {\n  chart: `\n    go ->\n      prepare-to-stop ->\n      stop\n\n    // ...gotta keep that traffic flowing\n    stop ->\n      prepare-to-go ->\n      go\n  `,\n  startIn: 'stop'\n})\n\nmachine.performTransitions({\n  'stop -> prepare-to-go':   { on: 'timer' },\n  'prepare-to-go -> go':     { on: 'timer' },\n  'go -> prepare-to-stop':   { on: 'timer' },\n  'prepare-to-stop -> stop': { on: 'timer' }\n})\n\nvar nextTrafficLight = machine.Emit('timer')\nmachine.currentState()\n// \"stop\"\n\nnextTrafficLight()\nnextTrafficLight()\nnextTrafficLight()\n\nmachine.currentState()\n// \"prepare-to-stop\"",
              "lineNumber": 15
            }
          ],
          "loc": {
            "start": {
              "line": 839,
              "column": 4
            },
            "end": {
              "line": 886,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 887,
                "column": 4
              },
              "end": {
                "line": 887,
                "column": 8
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('traffic-lights', {\n  chart: `\n    go ->\n      prepare-to-stop ->\n      stop\n\n    // ...gotta keep that traffic flowing\n    stop ->\n      prepare-to-go ->\n      go\n  `,\n  startIn: 'stop'\n})\n\nmachine.performTransitions({\n  'stop -> prepare-to-go':   { on: 'timer' },\n  'prepare-to-go -> go':     { on: 'timer' },\n  'go -> prepare-to-stop':   { on: 'timer' },\n  'prepare-to-stop -> stop': { on: 'timer' }\n})\n\nvar nextTrafficLight = machine.Emit('timer')\nmachine.currentState()\n// \"stop\"\n\nnextTrafficLight()\nnextTrafficLight()\nnextTrafficLight()\n\nmachine.currentState()\n// \"prepare-to-stop\""
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "eventName",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired event to "
                      },
                      {
                        "type": "link",
                        "url": "#statebotfsmemit",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": ".emit()"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "curriedArgs",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will curry into the returned "
                      },
                      {
                        "type": "inlineCode",
                        "value": "emit()"
                      },
                      {
                        "type": "text",
                        "value": " function\nwhenever it is called."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that emits that event."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "Emit",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "Emit",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#Emit"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Immediately changes to the specified state, so long as it is\naccessible from the "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": null
            },
            {
              "title": "param",
              "description": "The desired state to switch-to.",
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "Optional arguments to pass to transition callbacks.",
              "lineNumber": 8,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "args"
            },
            {
              "title": "returns",
              "description": "Whether or not the state changed.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('dialog', {\n  chart: `\n    idle -> showing-modal -> (saving | idle)\n      saving -> idle\n  `\n})\n\nmachine.currentState()\n// \"idle\"\n\nmachine.enter('saving')\n// false\n\n// [dialog]: Invalid transition \"idle->saving\", not switching\n// > Previous transition: \"[undefined]->idle\"\n// > From \"idle\", valid states are: [\"showing-modal\"]\n\nmachine.enter('showing-modal')\n// true",
              "lineNumber": 12
            }
          ],
          "loc": {
            "start": {
              "line": 889,
              "column": 4
            },
            "end": {
              "line": 921,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 922,
                "column": 4
              },
              "end": {
                "line": 922,
                "column": 9
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('dialog', {\n  chart: `\n    idle -> showing-modal -> (saving | idle)\n      saving -> idle\n  `\n})\n\nmachine.currentState()\n// \"idle\"\n\nmachine.enter('saving')\n// false\n\n// [dialog]: Invalid transition \"idle->saving\", not switching\n// > Previous transition: \"[undefined]->idle\"\n// > From \"idle\", valid states are: [\"showing-modal\"]\n\nmachine.enter('showing-modal')\n// true"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired state to switch-to."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "args",
              "lineNumber": 8,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Optional arguments to pass to transition callbacks."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Whether or not the state changed."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "enter",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "enter",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#enter"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Creates a function that changes to the specified state, so long\nas it is accessible from the "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "(This is essentially a convenience wrapper around "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmenter",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".enter()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ".)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The desired state to switch-to.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "Arguments that will curry into the returned `enter()` function\n whenever it is called.",
              "lineNumber": 10,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "curriedArgs"
            },
            {
              "title": "returns",
              "description": "A function that can change the state when called.",
              "lineNumber": 13,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('popup-menu', {\n  chart: `\n    idle -> menu-opened ->\n      (item-clicked | idle)\n\n    item-clicked -> idle\n  `,\n  startIn: 'menu-opened'\n})\n\nbutton.onclick = machine.Enter('item-clicked')\nmachine.currentState()\n// \"menu-opened\"\n\nbutton.onclick()\nmachine.currentState()\n// \"item-clicked\"",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 924,
              "column": 4
            },
            "end": {
              "line": 958,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 959,
                "column": 4
              },
              "end": {
                "line": 959,
                "column": 9
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('popup-menu', {\n  chart: `\n    idle -> menu-opened ->\n      (item-clicked | idle)\n\n    item-clicked -> idle\n  `,\n  startIn: 'menu-opened'\n})\n\nbutton.onclick = machine.Enter('item-clicked')\nmachine.currentState()\n// \"menu-opened\"\n\nbutton.onclick()\nmachine.currentState()\n// \"item-clicked\""
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The desired state to switch-to."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "curriedArgs",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will curry into the returned "
                      },
                      {
                        "type": "inlineCode",
                        "value": "enter()"
                      },
                      {
                        "type": "text",
                        "value": " function\nwhenever it is called."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that can change the state when called."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "Enter",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "Enter",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#Enter"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns all states the machine has been in so far, up to a limit set\nby "
                  },
                  {
                    "type": "inlineCode",
                    "value": "historyLimit"
                  },
                  {
                    "type": "text",
                    "value": " in "
                  },
                  {
                    "type": "link",
                    "url": "statebotOptions",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "statebotOptions"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": null
            },
            {
              "title": "returns",
              "description": "A copy of the state-history.",
              "lineNumber": 7,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('downloader', {\n  chart: `\n    loading -> (failure | success)\n      failure -> loading\n      success -> done\n  `,\n  historyLimit: 4\n})\n\nmachine.enter('failure')\nmachine.enter('loading')\nmachine.enter('success')\nmachine.enter('done')\nmachine.history()\n// [\"failure\", \"loading\", \"success\", \"done\"]",
              "lineNumber": 9
            }
          ],
          "loc": {
            "start": {
              "line": 961,
              "column": 4
            },
            "end": {
              "line": 986,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 987,
                "column": 4
              },
              "end": {
                "line": 987,
                "column": 36
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('downloader', {\n  chart: `\n    loading -> (failure | success)\n      failure -> loading\n      success -> done\n  `,\n  historyLimit: 4\n})\n\nmachine.enter('failure')\nmachine.enter('loading')\nmachine.enter('success')\nmachine.enter('done')\nmachine.history()\n// [\"failure\", \"loading\", \"success\", \"done\"]"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A copy of the state-history."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "history",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "history",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#history"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Print information about the current machine to the console."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 3
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.info()\n// [half-duplex]: Information about this state-machine.\n// [half-duplex]: Listening for the following state-changes:\n// ┌─────────┬─────────────┬────────┐\n// │ (index) │   states    │   #    │\n// ├─────────┼─────────────┼────────┤\n// │    0    │   'done'    │ 'None' │\n// │    1    │   'idle'    │ 'None' │\n// │    2    │ 'receiving' │ 'None' │\n// │    3    │  'sending'  │ 'None' │\n// └─────────┴─────────────┴────────┘\n// [half-duplex] Listening for the following transitions:\n// ┌─────────┬───────────────────┬────────┐\n// │ (index) │    transitions    │   #    │\n// ├─────────┼───────────────────┼────────┤\n// │    0    │ 'idle->receiving' │ 'None' │\n// │    1    │  'idle->sending'  │ 'None' │\n// │    2    │ 'receiving->done' │ 'None' │\n// │    3    │  'sending->done'  │ 'None' │\n// └─────────┴───────────────────┴────────┘\n// [half-duplex]: Listening for the following events:\n// (No information)",
              "lineNumber": 5
            }
          ],
          "loc": {
            "start": {
              "line": 989,
              "column": 4
            },
            "end": {
              "line": 1023,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1024,
                "column": 4
              },
              "end": {
                "line": 1024,
                "column": 22
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.info()\n// [half-duplex]: Information about this state-machine.\n// [half-duplex]: Listening for the following state-changes:\n// ┌─────────┬─────────────┬────────┐\n// │ (index) │   states    │   #    │\n// ├─────────┼─────────────┼────────┤\n// │    0    │   'done'    │ 'None' │\n// │    1    │   'idle'    │ 'None' │\n// │    2    │ 'receiving' │ 'None' │\n// │    3    │  'sending'  │ 'None' │\n// └─────────┴─────────────┴────────┘\n// [half-duplex] Listening for the following transitions:\n// ┌─────────┬───────────────────┬────────┐\n// │ (index) │    transitions    │   #    │\n// ├─────────┼───────────────────┼────────┤\n// │    0    │ 'idle->receiving' │ 'None' │\n// │    1    │  'idle->sending'  │ 'None' │\n// │    2    │ 'receiving->done' │ 'None' │\n// │    3    │  'sending->done'  │ 'None' │\n// └─────────┴───────────────────┴────────┘\n// [half-duplex]: Listening for the following events:\n// (No information)"
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "name": "info",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "info",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#info"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Get information about the current machine."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Same details as "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsminfo",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".info()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " in object-form."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 5
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 6
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 7,
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.inspect()\n// Will return an object with the following signature:\n//  { states, transitions, events }\n\n// These will each have key-values, the key being the name\n// and the value being the number of listeners attached.",
              "lineNumber": 8
            }
          ],
          "loc": {
            "start": {
              "line": 1026,
              "column": 4
            },
            "end": {
              "line": 1047,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1048,
                "column": 4
              },
              "end": {
                "line": 1048,
                "column": 28
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.inspect()\n// Will return an object with the following signature:\n//  { states, transitions, events }\n\n// These will each have key-values, the key being the name\n// and the value being the number of listeners attached."
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "object"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "name": "inspect",
          "kind": "function",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "inspect",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#inspect"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Checks if the "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nmatches the specified "
                  },
                  {
                    "type": "inlineCode",
                    "value": "state"
                  },
                  {
                    "type": "text",
                    "value": ", immediately returning either\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "false"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If "
                  },
                  {
                    "type": "inlineCode",
                    "value": "outputWhenTrue"
                  },
                  {
                    "type": "text",
                    "value": " is specified, then it will be returned\ninstead of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": ", and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "null"
                  },
                  {
                    "type": "text",
                    "value": " will be returned instead of\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "false"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If a function is specified, then its return-value will be used\nas the "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": "-value."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Since v2.7.0:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "An object can be used instead of a string, with the keys\nbeing the states, and the values corresponding to their\n"
                          },
                          {
                            "type": "inlineCode",
                            "value": "outputWhenTrue"
                          },
                          {
                            "type": "text",
                            "value": " value. See the updated example below."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 17
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 18
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 19,
              "name": null
            },
            {
              "title": "param",
              "description": "The state to test against. This can be a string if you have a\n single condition, or an object for multiple. (See example.)",
              "lineNumber": 20,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "object"
                  }
                ]
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "When a string is specified as the first argment, this becomes\n an optional `true`-value that is returned if the state matches.\n If a function is specified, it will be called and its return\n value will be used.",
              "lineNumber": 23,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "any"
                    },
                    {
                      "type": "NameExpression",
                      "name": "function"
                    }
                  ]
                }
              },
              "name": "outputWhenTrue"
            },
            {
              "title": "param",
              "description": "Arguments that will pass into `outputWhenTrue()` if it has\n been defined as a function.",
              "lineNumber": 28,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "fnArgs"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 31,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  {
                    "type": "NullLiteral"
                  },
                  {
                    "type": "AllLiteral"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('little-revver', {\n  chart: `\n    idle ->\n      (gear-1 | gear-2 | reverse) ->\n    idle\n  `\n})\n\nmachine.inState('idle')\n// true\n\nmachine.inState('idle', 'Purrrr...')\n// \"Purrrr...\"\n\nmachine.enter('gear-1')\n\n// Since v2.7.0:\nmachine.inState({\n  'idle': 'Purrrr...',\n  'gear-1': () => 'Chugga-chugga-chugga...',\n  'gear-2': () => 'Brumma-brumma-brum-brum...',\n  'reverse': false,\n})\n// \"Chugga-chugga-chugga...\"\n\nmachine.inState('idle', () => {\n  console.log('Idling!')\n  return 'Purrrr...'\n})\n// null\n// ^ the function is not called at all in the `false` case,\n//   so no console.log either.",
              "lineNumber": 33
            }
          ],
          "loc": {
            "start": {
              "line": 1050,
              "column": 4
            },
            "end": {
              "line": 1116,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1117,
                "column": 4
              },
              "end": {
                "line": 1117,
                "column": 11
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('little-revver', {\n  chart: `\n    idle ->\n      (gear-1 | gear-2 | reverse) ->\n    idle\n  `\n})\n\nmachine.inState('idle')\n// true\n\nmachine.inState('idle', 'Purrrr...')\n// \"Purrrr...\"\n\nmachine.enter('gear-1')\n\n// Since v2.7.0:\nmachine.inState({\n  'idle': 'Purrrr...',\n  'gear-1': () => 'Chugga-chugga-chugga...',\n  'gear-2': () => 'Brumma-brumma-brum-brum...',\n  'reverse': false,\n})\n// \"Chugga-chugga-chugga...\"\n\nmachine.inState('idle', () => {\n  console.log('Idling!')\n  return 'Purrrr...'\n})\n// null\n// ^ the function is not called at all in the `false` case,\n//   so no console.log either."
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 20,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state to test against. This can be a string if you have a\nsingle condition, or an object for multiple. (See example.)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "NameExpression",
                    "name": "object"
                  }
                ]
              }
            },
            {
              "title": "param",
              "name": "outputWhenTrue",
              "lineNumber": 23,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "When a string is specified as the first argment, this becomes\nan optional "
                      },
                      {
                        "type": "inlineCode",
                        "value": "true"
                      },
                      {
                        "type": "text",
                        "value": "-value that is returned if the state matches.\nIf a function is specified, it will be called and its return\nvalue will be used."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "any"
                    },
                    {
                      "type": "NameExpression",
                      "name": "function"
                    }
                  ]
                }
              }
            },
            {
              "title": "param",
              "name": "fnArgs",
              "lineNumber": 28,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will pass into "
                      },
                      {
                        "type": "inlineCode",
                        "value": "outputWhenTrue()"
                      },
                      {
                        "type": "text",
                        "value": " if it has\nbeen defined as a function."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "boolean"
                  },
                  {
                    "type": "NullLiteral"
                  },
                  {
                    "type": "AllLiteral"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "inState",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "inState",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#inState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns a function which, when run, tests that\n"
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " matches the\nspecified state, returning either "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": " or "
                  },
                  {
                    "type": "inlineCode",
                    "value": "false"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "If "
                  },
                  {
                    "type": "inlineCode",
                    "value": "outputWhenTrue"
                  },
                  {
                    "type": "text",
                    "value": " is specified, then it will be returned\ninstead of "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": ", and "
                  },
                  {
                    "type": "inlineCode",
                    "value": "null"
                  },
                  {
                    "type": "text",
                    "value": " will be returned instead of\n"
                  },
                  {
                    "type": "inlineCode",
                    "value": "false"
                  },
                  {
                    "type": "text",
                    "value": "."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "(This is essentially a convenience wrapper around "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsminstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".inState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": ".)"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 11
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 12
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 13,
              "name": null
            },
            {
              "title": "param",
              "description": "The state to test against.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "Optional `true`-value. If a function is specified, it will be\n called and its return value will be used.",
              "lineNumber": 15,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "any"
                    },
                    {
                      "type": "NameExpression",
                      "name": "function"
                    }
                  ]
                }
              },
              "name": "outputWhenTrue"
            },
            {
              "title": "param",
              "description": "Arguments that will curry into `outputWhenTrue()` if it has\n been defined as a function.",
              "lineNumber": 18,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              },
              "name": "curriedFnArgs"
            },
            {
              "title": "returns",
              "description": "A function that calls {@link #statebotfsminstate|.inState()}.",
              "lineNumber": 21,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('little-revver', {\n  chart: `\n    idle ->\n      (gear-1 | gear-2 | reverse) ->\n    idle\n  `\n})\n\nvar idling = machine.InState('idle')\nvar purring = machine.InState('idle', () => {\n  console.log('Idling!')\n  return 'Purrrr...'\n})\n\nidling()\n// true\n\npurring()\n// Idling!\n// \"Purrrr...\"\n\nmachine.enter('gear-1')\npurring()\n// null\n// ^ the function is not called at all in the `false` case,\n//   so no console.log either.",
              "lineNumber": 24
            }
          ],
          "loc": {
            "start": {
              "line": 1119,
              "column": 4
            },
            "end": {
              "line": 1170,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1171,
                "column": 4
              },
              "end": {
                "line": 1171,
                "column": 11
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('little-revver', {\n  chart: `\n    idle ->\n      (gear-1 | gear-2 | reverse) ->\n    idle\n  `\n})\n\nvar idling = machine.InState('idle')\nvar purring = machine.InState('idle', () => {\n  console.log('Idling!')\n  return 'Purrrr...'\n})\n\nidling()\n// true\n\npurring()\n// Idling!\n// \"Purrrr...\"\n\nmachine.enter('gear-1')\npurring()\n// null\n// ^ the function is not called at all in the `false` case,\n//   so no console.log either."
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 14,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state to test against."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "outputWhenTrue",
              "lineNumber": 15,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Optional "
                      },
                      {
                        "type": "inlineCode",
                        "value": "true"
                      },
                      {
                        "type": "text",
                        "value": "-value. If a function is specified, it will be\ncalled and its return value will be used."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "UnionType",
                  "elements": [
                    {
                      "type": "NameExpression",
                      "name": "any"
                    },
                    {
                      "type": "NameExpression",
                      "name": "function"
                    }
                  ]
                }
              }
            },
            {
              "title": "param",
              "name": "curriedFnArgs",
              "lineNumber": 18,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Arguments that will curry into "
                      },
                      {
                        "type": "inlineCode",
                        "value": "outputWhenTrue()"
                      },
                      {
                        "type": "text",
                        "value": " if it has\nbeen defined as a function."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "RestType",
                  "expression": {
                    "type": "AllLiteral"
                  }
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that calls "
                      },
                      {
                        "type": "link",
                        "url": "#statebotfsminstate",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": ".inState()"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "InState",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "InState",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#InState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the name of the state-machine."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Used for logging and also by "
                  },
                  {
                    "type": "link",
                    "url": "#statebotassertroute",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": "assertRoute()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nfor the same."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "returns",
              "description": "The name of the state-machine.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('Ay, there’s the rub.', {\n  chart: `\n    the-question -> (to-be | not-to-be)\n      not-to-be -> perchance-to-dream\n  `\n})\n\nmachine.name()\n// \"Ay, there’s the rub.\"",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 1173,
              "column": 4
            },
            "end": {
              "line": 1194,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1195,
                "column": 4
              },
              "end": {
                "line": 1195,
                "column": 20
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('Ay, there’s the rub.', {\n  chart: `\n    the-question -> (to-be | not-to-be)\n      not-to-be -> perchance-to-dream\n  `\n})\n\nmachine.name()\n// \"Ay, there’s the rub.\""
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The name of the state-machine."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "name",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "name",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#name"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "AFTER"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " the\nspecified-state becomes the current one."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The state.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(fromState, ...args?)`",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "enterCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onEntered('done', fromState => {\n  console.log('Entered from:', fromState)\n})\n\nmachine.enter('receiving')\nmachine.enter('done')\n// Entered from: receiving",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 1197,
              "column": 4
            },
            "end": {
              "line": 1227,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1228,
                "column": 4
              },
              "end": {
                "line": 1228,
                "column": 43
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onEntered('done', fromState => {\n  console.log('Entered from:', fromState)\n})\n\nmachine.enter('receiving')\nmachine.enter('done')\n// Entered from: receiving"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(fromState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "enterCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onEntered",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onEntered",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onEntered"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "BEFORE"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " the\nspecified-state becomes the current one."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The state.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(fromState, ...args?)`",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "enterCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onEntered('done', () => {\n  console.log('We made it!')\n})\n\nmachine.onEntering('done', fromState => {\n  console.log('Entering from:', fromState)\n})\n\nmachine.enter('sending')\nmachine.enter('done')\n// Entering from: sending\n// We made it!",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 1230,
              "column": 4
            },
            "end": {
              "line": 1265,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1266,
                "column": 4
              },
              "end": {
                "line": 1266,
                "column": 45
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onEntered('done', () => {\n  console.log('We made it!')\n})\n\nmachine.onEntering('done', fromState => {\n  console.log('Entering from:', fromState)\n})\n\nmachine.enter('sending')\nmachine.enter('done')\n// Entering from: sending\n// We made it!"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(fromState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "enterCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onEntering",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onEntering",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onEntering"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately after the specified\nevent is called."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The event name.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "name"
            },
            {
              "title": "param",
              "description": "The callback.",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "function"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 11,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('traffic-lights', {\n  chart: `\n    go ->\n      prepare-to-stop ->\n      stop\n\n    // ...gotta keep that traffic flowing\n    stop ->\n      prepare-to-go ->\n      go\n  `\n})\n\nmachine.performTransitions({\n  'stop -> prepare-to-go -> go':   { on: 'timer' },\n  'go -> prepare-to-stop -> stop': { on: 'timer' },\n})\n\nmachine.onEvent('timer', () => {\n  redrawTrafficLights()\n})\n\nsetInterval(machine.Emit('timer'), 2000)",
              "lineNumber": 13
            }
          ],
          "loc": {
            "start": {
              "line": 1279,
              "column": 4
            },
            "end": {
              "line": 1316,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1317,
                "column": 4
              },
              "end": {
                "line": 1317,
                "column": 11
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('traffic-lights', {\n  chart: `\n    go ->\n      prepare-to-stop ->\n      stop\n\n    // ...gotta keep that traffic flowing\n    stop ->\n      prepare-to-go ->\n      go\n  `\n})\n\nmachine.performTransitions({\n  'stop -> prepare-to-go -> go':   { on: 'timer' },\n  'go -> prepare-to-stop -> stop': { on: 'timer' },\n})\n\nmachine.onEvent('timer', () => {\n  redrawTrafficLights()\n})\n\nsetInterval(machine.Emit('timer'), 2000)"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "name",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The event name."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The callback."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onEvent",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onEvent",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onEvent"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "AFTER"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " the\nspecified-state is no longer the current one."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The state.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(toState, ...args?)`",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "exitCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onExited('idle', toState => {\n  console.log('We are heading to:', toState)\n})\n\nmachine.enter('sending')\n// We are heading to: sending",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 1319,
              "column": 4
            },
            "end": {
              "line": 1348,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1349,
                "column": 4
              },
              "end": {
                "line": 1349,
                "column": 41
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onExited('idle', toState => {\n  console.log('We are heading to:', toState)\n})\n\nmachine.enter('sending')\n// We are heading to: sending"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(toState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "exitCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onExited",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onExited",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onExited"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "BEFORE"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " the\nspecified-state is no longer the current one."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "The state.",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "string"
              },
              "name": "state"
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(toState, ...args?)`",
              "lineNumber": 10,
              "type": {
                "type": "NameExpression",
                "name": "exitCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 14,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onExited('idle', () => {\n  console.log('Peace out!')\n})\n\nmachine.onExiting('idle', toState => {\n  console.log('Heading to:', toState)\n})\n\nmachine.enter('receiving')\nmachine.enter('done')\n// Heading to: receiving\n// Peace out!",
              "lineNumber": 16
            }
          ],
          "loc": {
            "start": {
              "line": 1351,
              "column": 4
            },
            "end": {
              "line": 1386,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1387,
                "column": 4
              },
              "end": {
                "line": 1387,
                "column": 43
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onExited('idle', () => {\n  console.log('Peace out!')\n})\n\nmachine.onExiting('idle', toState => {\n  console.log('Heading to:', toState)\n})\n\nmachine.enter('receiving')\nmachine.enter('done')\n// Heading to: receiving\n// Peace out!"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "string"
              }
            },
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 10,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(toState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "exitCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onExiting",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onExiting",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onExiting"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately after "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "ANY"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nstate-change."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(toState, fromState, ...args?)`",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "switchCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 13,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onSwitched((toState, fromState) => {\n  console.log(`We went from \"${fromState}\" to \"${toState}\"`)\n})\n\nmachine.enter('receiving')\n// We went from \"idle\" to \"receiving\"",
              "lineNumber": 15
            }
          ],
          "loc": {
            "start": {
              "line": 1400,
              "column": 4
            },
            "end": {
              "line": 1428,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1429,
                "column": 4
              },
              "end": {
                "line": 1429,
                "column": 42
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onSwitched((toState, fromState) => {\n  console.log(`We went from \"${fromState}\" to \"${toState}\"`)\n})\n\nmachine.enter('receiving')\n// We went from \"idle\" to \"receiving\""
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(toState, fromState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "switchCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onSwitched",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onSwitched",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onSwitched"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Adds a listener that runs a callback immediately before "
                  },
                  {
                    "type": "strong",
                    "children": [
                      {
                        "type": "text",
                        "value": "ANY"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "\nstate-change."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "A function is returned that will remove the listener."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 6
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 7
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 8,
              "name": null
            },
            {
              "title": "param",
              "description": "A callback function with the signature:\n\n `(toState, fromState, ...args?)`",
              "lineNumber": 9,
              "type": {
                "type": "NameExpression",
                "name": "switchCallback"
              },
              "name": "cb"
            },
            {
              "title": "returns",
              "description": "A function that removes the listener.",
              "lineNumber": 13,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onSwitching((toState, fromState) => {\n  console.log(`Going from \"${fromState}\" to \"${toState}\"`)\n})\n\nmachine.enter('receiving')\n// Going from \"idle\" to \"receiving\"",
              "lineNumber": 15
            }
          ],
          "loc": {
            "start": {
              "line": 1431,
              "column": 4
            },
            "end": {
              "line": 1459,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1460,
                "column": 4
              },
              "end": {
                "line": 1460,
                "column": 44
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onSwitching((toState, fromState) => {\n  console.log(`Going from \"${fromState}\" to \"${toState}\"`)\n})\n\nmachine.enter('receiving')\n// Going from \"idle\" to \"receiving\""
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "cb",
              "lineNumber": 9,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A callback function with the signature:"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "inlineCode",
                        "value": "(toState, fromState, ...args?)"
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "NameExpression",
                "name": "switchCallback"
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes the listener."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onSwitching",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onSwitching",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onSwitching"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Run callbacks when transitions happen."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Since v2.8.0:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If a callback returns a function, it will be invoked when\nthe state is exited in the same manner as if an "
                          },
                          {
                            "type": "link",
                            "url": "#statebotfsmonexiting",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": ".onExiting()"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "\nhandler was created using it."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 8
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 9
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 10,
              "name": null
            },
            {
              "title": "param",
              "description": "Configuration in the form of an object, or a function that\n returns an object. If a function is used, there will be a single\n argument passed-in: an object with the following methods\n attached as a convenience:\n\n - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}",
              "lineNumber": 11,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "function"
                  }
                ]
              },
              "name": "transitions"
            },
            {
              "title": "returns",
              "description": "A function that removes all listeners added\n by this method.",
              "lineNumber": 19,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onTransitions({\n  'idle -> sending': () => {\n    sendData()\n      .then(machine.Enter('done', 'sent'))\n      .catch(machine.Enter('done', 'failed'))\n  },\n  'idle -> receiving': () => {\n    receiveData()\n      .then(machine.Enter('done', 'received'))\n      .catch(machine.Enter('done', 'failed'))\n  },\n  'sending | receiving -> done': whatHappened => {\n    console.log('All finished: ', whatHappened)\n  }\n})\n\nmachine.enter('sending')\n\nfunction sendData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}\n\nfunction receiveData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}",
              "lineNumber": 22
            },
            {
              "title": "example",
              "description": "// The above example using a function for config\nmachine.onTransitions(({ Enter }) => ({\n  'idle -> sending': () => {\n    sendData()\n      .then(Enter('done', 'sent'))\n      .catch(Enter('done', 'failed'))\n  },\n  'idle -> receiving': () => {\n    receiveData()\n      .then(Enter('done', 'received'))\n      .catch(Enter('done', 'failed'))\n  },\n  'sending | receiving -> done': whatHappened => {\n    console.log('All finished: ', whatHappened)\n  }\n}))\n\n// etc...",
              "lineNumber": 61
            }
          ],
          "loc": {
            "start": {
              "line": 1474,
              "column": 4
            },
            "end": {
              "line": 1554,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1555,
                "column": 4
              },
              "end": {
                "line": 1555,
                "column": 76
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.onTransitions({\n  'idle -> sending': () => {\n    sendData()\n      .then(machine.Enter('done', 'sent'))\n      .catch(machine.Enter('done', 'failed'))\n  },\n  'idle -> receiving': () => {\n    receiveData()\n      .then(machine.Enter('done', 'received'))\n      .catch(machine.Enter('done', 'failed'))\n  },\n  'sending | receiving -> done': whatHappened => {\n    console.log('All finished: ', whatHappened)\n  }\n})\n\nmachine.enter('sending')\n\nfunction sendData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}\n\nfunction receiveData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}"
            },
            {
              "description": "// The above example using a function for config\nmachine.onTransitions(({ Enter }) => ({\n  'idle -> sending': () => {\n    sendData()\n      .then(Enter('done', 'sent'))\n      .catch(Enter('done', 'failed'))\n  },\n  'idle -> receiving': () => {\n    receiveData()\n      .then(Enter('done', 'received'))\n      .catch(Enter('done', 'failed'))\n  },\n  'sending | receiving -> done': whatHappened => {\n    console.log('All finished: ', whatHappened)\n  }\n}))\n\n// etc..."
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "transitions",
              "lineNumber": 11,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Configuration in the form of an object, or a function that\nreturns an object. If a function is used, there will be a single\nargument passed-in: an object with the following methods\nattached as a convenience:"
                      }
                    ]
                  },
                  {
                    "type": "list",
                    "ordered": false,
                    "start": null,
                    "spread": false,
                    "children": [
                      {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "{"
                              },
                              {
                                "type": "link",
                                "url": "#statebotfsmenter",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".enter()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#statebotfsmemit",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".emit()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#enter-state-1",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".Enter()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#emit-name",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".Emit()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": "}"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "function"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes all listeners added\nby this method."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "onTransitions",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "onTransitions",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#onTransitions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Pause the machine. "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmemit",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".emit()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " and "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmenter",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".enter()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " will be no-ops until\nthe machine is "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmresume",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".resume()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "'d."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": null
            }
          ],
          "loc": {
            "start": {
              "line": 1557,
              "column": 4
            },
            "end": {
              "line": 1564,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1565,
                "column": 4
              },
              "end": {
                "line": 1565,
                "column": 9
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "pause",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "pause",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#pause"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns "
                  },
                  {
                    "type": "inlineCode",
                    "value": "true"
                  },
                  {
                    "type": "text",
                    "value": " if the machine is "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmpause",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".pause()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "'d"
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 3
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 5,
              "name": null
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 6,
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "loc": {
            "start": {
              "line": 1567,
              "column": 4
            },
            "end": {
              "line": 1574,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1575,
                "column": 4
              },
              "end": {
                "line": 1575,
                "column": 10
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "boolean"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "paused",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "paused",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#paused"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Perform transitions when events happen."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Use "
                  },
                  {
                    "type": "inlineCode",
                    "value": "then"
                  },
                  {
                    "type": "text",
                    "value": " to optionally add callbacks to those transitions."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Since v2.8.0:"
                  }
                ]
              },
              {
                "type": "list",
                "ordered": false,
                "start": null,
                "spread": false,
                "children": [
                  {
                    "type": "listItem",
                    "spread": false,
                    "checked": null,
                    "children": [
                      {
                        "type": "paragraph",
                        "children": [
                          {
                            "type": "text",
                            "value": "If a "
                          },
                          {
                            "type": "inlineCode",
                            "value": "then"
                          },
                          {
                            "type": "text",
                            "value": " method returns a function, it will be invoked when\nthe state is exited in the same manner as if an "
                          },
                          {
                            "type": "link",
                            "url": "#statebotfsmonexiting",
                            "title": null,
                            "jsdoc": true,
                            "children": [
                              {
                                "type": "text",
                                "value": ".onExiting()"
                              }
                            ]
                          },
                          {
                            "type": "text",
                            "value": "\nhandler was created using it."
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 10
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 11
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 12,
              "name": null
            },
            {
              "title": "param",
              "description": "Configuration in the form of an object, or a function that\n returns an object. If a function is used, there will be a single\n argument passed-in: an object with the following methods\n attached as a convenience:\n\n - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}",
              "lineNumber": 13,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "function"
                  }
                ]
              },
              "name": "transitions"
            },
            {
              "title": "returns",
              "description": "A function that removes all listeners added\n by this method.",
              "lineNumber": 21,
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('complex-form', {\n  chart: `\n    idle ->\n      update\n\n    // Maybe things take a long time...\n    update ->\n      waiting -> waiting-a-while\n\n    // Which path will we take?\n    waiting | waiting-a-while ->\n      success | failed | timeout\n\n    // All done!\n    success | failed | timeout ->\n      done\n  `\n})\n\nmachine.performTransitions(({ Enter, emit }) => ({\n  'idle -> update': {\n    on: 'user-saved',\n    then: (data) => {\n      console.log('Sending data: ', data)\n\n      sendData(data)\n        .then(Enter('success'))\n        .catch(Enter('failed'))\n\n      emit('data-sent')\n    }\n  },\n  'update -> waiting': {\n    on: 'data-sent',\n    then: () => {\n      setTimeout(Enter('waiting-a-while'), 750)\n      setTimeout(Enter('timeout'), 5000)\n    }\n  }\n}))\n\n// Just to illustrate that you can mix n' match with onTransitions:\nmachine.onTransitions({\n  'waiting | waiting-a-while -> success': () => {\n    console.log('Lovely!')\n  },\n  'waiting | waiting-a-while -> timeout': () => {\n    console.log('Well, at least you have your shoes')\n  }\n})\n\nmachine.emit('user-saved', ['some', 'data'])\n// Sending data: [\"some\", \"data\"]\n\nfunction sendData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}",
              "lineNumber": 24
            }
          ],
          "loc": {
            "start": {
              "line": 1577,
              "column": 4
            },
            "end": {
              "line": 1662,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1663,
                "column": 4
              },
              "end": {
                "line": 1663,
                "column": 86
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('complex-form', {\n  chart: `\n    idle ->\n      update\n\n    // Maybe things take a long time...\n    update ->\n      waiting -> waiting-a-while\n\n    // Which path will we take?\n    waiting | waiting-a-while ->\n      success | failed | timeout\n\n    // All done!\n    success | failed | timeout ->\n      done\n  `\n})\n\nmachine.performTransitions(({ Enter, emit }) => ({\n  'idle -> update': {\n    on: 'user-saved',\n    then: (data) => {\n      console.log('Sending data: ', data)\n\n      sendData(data)\n        .then(Enter('success'))\n        .catch(Enter('failed'))\n\n      emit('data-sent')\n    }\n  },\n  'update -> waiting': {\n    on: 'data-sent',\n    then: () => {\n      setTimeout(Enter('waiting-a-while'), 750)\n      setTimeout(Enter('timeout'), 5000)\n    }\n  }\n}))\n\n// Just to illustrate that you can mix n' match with onTransitions:\nmachine.onTransitions({\n  'waiting | waiting-a-while -> success': () => {\n    console.log('Lovely!')\n  },\n  'waiting | waiting-a-while -> timeout': () => {\n    console.log('Well, at least you have your shoes')\n  }\n})\n\nmachine.emit('user-saved', ['some', 'data'])\n// Sending data: [\"some\", \"data\"]\n\nfunction sendData() {\n  return new Promise((resolve, reject) => {\n    setTimeout(resolve, 1000)\n    setTimeout(reject, 750 + Math.round(Math.random() * 750))\n  })\n}"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "transitions",
              "lineNumber": 13,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "Configuration in the form of an object, or a function that\nreturns an object. If a function is used, there will be a single\nargument passed-in: an object with the following methods\nattached as a convenience:"
                      }
                    ]
                  },
                  {
                    "type": "list",
                    "ordered": false,
                    "start": null,
                    "spread": false,
                    "children": [
                      {
                        "type": "listItem",
                        "spread": false,
                        "checked": null,
                        "children": [
                          {
                            "type": "paragraph",
                            "children": [
                              {
                                "type": "text",
                                "value": "{"
                              },
                              {
                                "type": "link",
                                "url": "#statebotfsmenter",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".enter()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#statebotfsmemit",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".emit()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#enter-state-1",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".Enter()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": ", "
                              },
                              {
                                "type": "link",
                                "url": "#emit-name",
                                "title": null,
                                "jsdoc": true,
                                "children": [
                                  {
                                    "type": "text",
                                    "value": ".Emit()"
                                  }
                                ]
                              },
                              {
                                "type": "text",
                                "value": "}"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "object"
                  },
                  {
                    "type": "NameExpression",
                    "name": "function"
                  }
                ]
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "A function that removes all listeners added\nby this method."
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "NameExpression",
                "name": "function"
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "performTransitions",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "performTransitions",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#performTransitions"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the previous state."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 3
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 5,
              "name": null
            },
            {
              "title": "returns",
              "description": "The previous state, or `undefined` if there isn't one (ie; you\n have just called {@link #statebotfsmreset|.reset()}, or the\n machine has just started.)",
              "lineNumber": 6,
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('simple-sender', {\n  chart: `\n    idle -> sending -> done\n  `\n})\n\nmachine.enter('sending')\nmachine.previousState()\n// \"idle\"",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 1665,
              "column": 4
            },
            "end": {
              "line": 1686,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1687,
                "column": 4
              },
              "end": {
                "line": 1687,
                "column": 17
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('simple-sender', {\n  chart: `\n    idle -> sending -> done\n  `\n})\n\nmachine.enter('sending')\nmachine.previousState()\n// \"idle\""
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The previous state, or "
                      },
                      {
                        "type": "inlineCode",
                        "value": "undefined"
                      },
                      {
                        "type": "text",
                        "value": " if there isn't one (ie; you\nhave just called "
                      },
                      {
                        "type": "link",
                        "url": "#statebotfsmreset",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": ".reset()"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": ", or the\nmachine has just started.)"
                      }
                    ]
                  }
                ]
              },
              "title": "returns",
              "type": {
                "type": "UnionType",
                "elements": [
                  {
                    "type": "NameExpression",
                    "name": "string"
                  },
                  {
                    "type": "UndefinedLiteral"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "previousState",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "previousState",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#previousState"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Returns the state-machine to its starting-state and clears the\nstate-history."
                  }
                ]
              },
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "All listeners will still be attached, but no events or\ntransitions will be fired. The pause-state will be maintained."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 7
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 8
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 9,
              "name": null
            },
            {
              "title": "example",
              "description": "var machine = Statebot('carousel', {\n  chart: `\n    page-1 ->\n    page-2 ->\n    page-3 ->\n    page-4 -> page-1\n  `\n})\n\nmachine.enter('page-2')\nmachine.reset()\nmachine.currentState()\n// \"page-1\"",
              "lineNumber": 11
            }
          ],
          "loc": {
            "start": {
              "line": 1689,
              "column": 4
            },
            "end": {
              "line": 1714,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1715,
                "column": 4
              },
              "end": {
                "line": 1715,
                "column": 9
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('carousel', {\n  chart: `\n    page-1 ->\n    page-2 ->\n    page-3 ->\n    page-4 -> page-1\n  `\n})\n\nmachine.enter('page-2')\nmachine.reset()\nmachine.currentState()\n// \"page-1\""
            }
          ],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "reset",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "reset",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#reset"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Resume a "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmpause",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".pause()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": "'d machine."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 3
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 4
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 5,
              "name": null
            }
          ],
          "loc": {
            "start": {
              "line": 1717,
              "column": 4
            },
            "end": {
              "line": 1723,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1724,
                "column": 4
              },
              "end": {
                "line": 1724,
                "column": 10
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [],
          "implements": [],
          "params": [],
          "properties": [],
          "returns": [],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "resume",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "resume",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#resume"
        },
        {
          "description": {
            "type": "root",
            "children": [
              {
                "type": "paragraph",
                "children": [
                  {
                    "type": "text",
                    "value": "Return an "
                  },
                  {
                    "type": "inlineCode",
                    "value": "array"
                  },
                  {
                    "type": "text",
                    "value": " of states accessible from the state specified.\nIf no state is passed-in, the "
                  },
                  {
                    "type": "link",
                    "url": "#statebotfsmcurrentstate",
                    "title": null,
                    "jsdoc": true,
                    "children": [
                      {
                        "type": "text",
                        "value": ".currentState()"
                      }
                    ]
                  },
                  {
                    "type": "text",
                    "value": " is used."
                  }
                ]
              }
            ]
          },
          "tags": [
            {
              "title": "memberof",
              "description": "statebotFsm",
              "lineNumber": 4
            },
            {
              "title": "instance",
              "description": null,
              "lineNumber": 5
            },
            {
              "title": "function",
              "description": null,
              "lineNumber": 6,
              "name": null
            },
            {
              "title": "param",
              "description": "The state to check. {@link #statebotfsmcurrentstate|.currentState()}\n if unspecified.",
              "lineNumber": 7,
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              },
              "name": "state"
            },
            {
              "title": "returns",
              "description": null,
              "lineNumber": 9,
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "String"
                  }
                ]
              }
            },
            {
              "title": "example",
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.statesAvailableFromHere()\n// [\"sending\", \"receiving\"]\n\nmachine.statesAvailableFromHere('receiving')\n// [\"done\"]",
              "lineNumber": 10
            }
          ],
          "loc": {
            "start": {
              "line": 1726,
              "column": 4
            },
            "end": {
              "line": 1748,
              "column": 7
            }
          },
          "context": {
            "loc": {
              "start": {
                "line": 1749,
                "column": 4
              },
              "end": {
                "line": 1749,
                "column": 27
              }
            },
            "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
          },
          "augments": [],
          "examples": [
            {
              "description": "var machine = Statebot('half-duplex', {\n  chart: `\n    idle -> sending | receiving -> done\n  `\n})\n\nmachine.statesAvailableFromHere()\n// [\"sending\", \"receiving\"]\n\nmachine.statesAvailableFromHere('receiving')\n// [\"done\"]"
            }
          ],
          "implements": [],
          "params": [
            {
              "title": "param",
              "name": "state",
              "lineNumber": 7,
              "description": {
                "type": "root",
                "children": [
                  {
                    "type": "paragraph",
                    "children": [
                      {
                        "type": "text",
                        "value": "The state to check. "
                      },
                      {
                        "type": "link",
                        "url": "#statebotfsmcurrentstate",
                        "title": null,
                        "jsdoc": true,
                        "children": [
                          {
                            "type": "text",
                            "value": ".currentState()"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "value": "\nif unspecified."
                      }
                    ]
                  }
                ]
              },
              "type": {
                "type": "OptionalType",
                "expression": {
                  "type": "NameExpression",
                  "name": "string"
                }
              }
            }
          ],
          "properties": [],
          "returns": [
            {
              "description": {
                "type": "root",
                "children": []
              },
              "title": "returns",
              "type": {
                "type": "TypeApplication",
                "expression": {
                  "type": "NameExpression",
                  "name": "Array"
                },
                "applications": [
                  {
                    "type": "NameExpression",
                    "name": "String"
                  }
                ]
              }
            }
          ],
          "sees": [],
          "throws": [],
          "todos": [],
          "yields": [],
          "memberof": "statebotFsm",
          "scope": "instance",
          "kind": "function",
          "name": "statesAvailableFromHere",
          "members": {
            "global": [],
            "inner": [],
            "instance": [],
            "events": [],
            "static": []
          },
          "path": [
            {
              "name": "statebotFsm",
              "kind": "typedef"
            },
            {
              "name": "statesAvailableFromHere",
              "kind": "function",
              "scope": "instance"
            }
          ],
          "namespace": "statebotFsm#statesAvailableFromHere"
        }
      ],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "statebotFsm",
        "kind": "typedef"
      }
    ],
    "namespace": "statebotFsm"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "link",
              "url": "#statebotfsmonentering",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onEntering()"
                }
              ]
            },
            {
              "type": "text",
              "value": " /\n"
            },
            {
              "type": "link",
              "url": "#statebotfsmonentered",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onEntered()"
                }
              ]
            },
            {
              "type": "text",
              "value": " callback signature."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "callback",
        "description": "enterCallback",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "fromState"
      },
      {
        "title": "param",
        "description": "Arguments passed-down from {@link #statebotfsmenter .enter()} or\n {@link #statebotfsmemit .emit()}",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        },
        "name": "args"
      }
    ],
    "loc": {
      "start": {
        "line": 1268,
        "column": 4
      },
      "end": {
        "line": 1277,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 1317,
          "column": 4
        },
        "end": {
          "line": 1317,
          "column": 11
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "fromState",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "args",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Arguments passed-down from "
                },
                {
                  "type": "link",
                  "url": "#statebotfsmenter",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".enter()"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": " or\n"
                },
                {
                  "type": "link",
                  "url": "#statebotfsmemit",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".emit()"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "enterCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "enterCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "enterCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "link",
              "url": "#statebotfsmonexiting",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onExiting()"
                }
              ]
            },
            {
              "type": "text",
              "value": " /\n"
            },
            {
              "type": "link",
              "url": "#statebotfsmonexited",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onExited()"
                }
              ]
            },
            {
              "type": "text",
              "value": " callback signature."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "callback",
        "description": "exitCallback",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "toState"
      },
      {
        "title": "param",
        "description": "Arguments passed-down from {@link #statebotfsmenter .enter()} or\n {@link #statebotfsmemit .emit()}",
        "lineNumber": 6,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        },
        "name": "args"
      }
    ],
    "loc": {
      "start": {
        "line": 1389,
        "column": 4
      },
      "end": {
        "line": 1398,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 1429,
          "column": 4
        },
        "end": {
          "line": 1429,
          "column": 42
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "toState",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "args",
        "lineNumber": 6,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Arguments passed-down from "
                },
                {
                  "type": "link",
                  "url": "#statebotfsmenter",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".enter()"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": " or\n"
                },
                {
                  "type": "link",
                  "url": "#statebotfsmemit",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".emit()"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "exitCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "exitCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "exitCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "link",
              "url": "#statebotfsmonswitching",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onSwitching()"
                }
              ]
            },
            {
              "type": "text",
              "value": " /\n"
            },
            {
              "type": "link",
              "url": "#statebotfsmonswitched",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": ".onSwitched()"
                }
              ]
            },
            {
              "type": "text",
              "value": " callback signature."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "callback",
        "description": "switchCallback",
        "lineNumber": 4
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "toState"
      },
      {
        "title": "param",
        "description": null,
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        },
        "name": "fromState"
      },
      {
        "title": "param",
        "description": "Arguments passed-down from {@link #statebotfsmenter .enter()} or\n {@link #statebotfsmemit .emit()}",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        },
        "name": "args"
      }
    ],
    "loc": {
      "start": {
        "line": 1462,
        "column": 4
      },
      "end": {
        "line": 1472,
        "column": 7
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 1555,
          "column": 4
        },
        "end": {
          "line": 1555,
          "column": 76
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/statebot.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [
      {
        "title": "param",
        "name": "toState",
        "lineNumber": 5,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "fromState",
        "lineNumber": 6,
        "type": {
          "type": "NameExpression",
          "name": "string"
        }
      },
      {
        "title": "param",
        "name": "args",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Arguments passed-down from "
                },
                {
                  "type": "link",
                  "url": "#statebotfsmenter",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".enter()"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": " or\n"
                },
                {
                  "type": "link",
                  "url": "#statebotfsmemit",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": ".emit()"
                    }
                  ]
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "RestType",
            "expression": {
              "type": "NameExpression",
              "name": "any"
            }
          }
        }
      }
    ],
    "properties": [],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "switchCallback",
    "type": {
      "type": "NameExpression",
      "name": "Function"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "switchCallback",
        "kind": "typedef"
      }
    ],
    "namespace": "switchCallback"
  },
  {
    "description": {
      "type": "root",
      "children": [
        {
          "type": "paragraph",
          "children": [
            {
              "type": "link",
              "url": "#statebotassertroute",
              "title": null,
              "jsdoc": true,
              "children": [
                {
                  "type": "text",
                  "value": "assertRoute()"
                }
              ]
            },
            {
              "type": "text",
              "value": " options."
            }
          ]
        }
      ]
    },
    "tags": [
      {
        "title": "typedef",
        "description": null,
        "lineNumber": 2,
        "type": {
          "type": "NameExpression",
          "name": "Object"
        },
        "name": "assertRouteOptions"
      },
      {
        "title": "property",
        "description": "Describe the success-condition for this assertion.",
        "lineNumber": 3,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "description"
      },
      {
        "title": "property",
        "description": "Wait for the machine to be in this state before assertion begins.",
        "lineNumber": 5,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        },
        "name": "fromState",
        "default": "\"\""
      },
      {
        "title": "property",
        "description": "Run this function just before starting the assertion.",
        "lineNumber": 7,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "function"
          }
        },
        "name": "run"
      },
      {
        "title": "property",
        "description": "If we hit an unexpected state during assertion, this is a \"deviation\".\n It might be that the FSM will come back to the expected state again\n after a certain number of these. For example, if your FSM has a\n \"retry\" route configured, this number can account for it.",
        "lineNumber": 9,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "permittedDeviations",
        "default": "0"
      },
      {
        "title": "property",
        "description": "Permitted length of time for the entire assertion, in milliseconds.",
        "lineNumber": 14,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "timeoutInMs",
        "default": "1000"
      },
      {
        "title": "property",
        "description": "Normally we want logs for assertions, right? Well, you can tune\n them just like you can with {@link #statebotoptions|statebotOptions}.",
        "lineNumber": 16,
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        },
        "name": "logLevel",
        "default": "3"
      }
    ],
    "loc": {
      "start": {
        "line": 77,
        "column": 0
      },
      "end": {
        "line": 96,
        "column": 3
      }
    },
    "context": {
      "loc": {
        "start": {
          "line": 139,
          "column": 0
        },
        "end": {
          "line": 267,
          "column": 1
        }
      },
      "file": "/Users/mostly/Projects/statebot/statebot/src/assertions.js"
    },
    "augments": [],
    "examples": [],
    "implements": [],
    "params": [],
    "properties": [
      {
        "title": "property",
        "name": "description",
        "lineNumber": 3,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Describe the success-condition for this assertion."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      },
      {
        "title": "property",
        "name": "fromState",
        "lineNumber": 5,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Wait for the machine to be in this state before assertion begins."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "string"
          }
        }
      },
      {
        "title": "property",
        "name": "run",
        "lineNumber": 7,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Run this function just before starting the assertion."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "function"
          }
        }
      },
      {
        "title": "property",
        "name": "permittedDeviations",
        "lineNumber": 9,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "If we hit an unexpected state during assertion, this is a \"deviation\".\nIt might be that the FSM will come back to the expected state again\nafter a certain number of these. For example, if your FSM has a\n\"retry\" route configured, this number can account for it."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      },
      {
        "title": "property",
        "name": "timeoutInMs",
        "lineNumber": 14,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Permitted length of time for the entire assertion, in milliseconds."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      },
      {
        "title": "property",
        "name": "logLevel",
        "lineNumber": 16,
        "description": {
          "type": "root",
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "text",
                  "value": "Normally we want logs for assertions, right? Well, you can tune\nthem just like you can with "
                },
                {
                  "type": "link",
                  "url": "#statebotoptions",
                  "title": null,
                  "jsdoc": true,
                  "children": [
                    {
                      "type": "text",
                      "value": "statebotOptions"
                    }
                  ]
                },
                {
                  "type": "text",
                  "value": "."
                }
              ]
            }
          ]
        },
        "type": {
          "type": "OptionalType",
          "expression": {
            "type": "NameExpression",
            "name": "number"
          }
        }
      }
    ],
    "returns": [],
    "sees": [],
    "throws": [],
    "todos": [],
    "yields": [],
    "kind": "typedef",
    "name": "assertRouteOptions",
    "type": {
      "type": "NameExpression",
      "name": "Object"
    },
    "members": {
      "global": [],
      "inner": [],
      "instance": [],
      "events": [],
      "static": []
    },
    "path": [
      {
        "name": "assertRouteOptions",
        "kind": "typedef"
      }
    ],
    "namespace": "assertRouteOptions"
  }
]