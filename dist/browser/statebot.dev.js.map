{"version":3,"file":"statebot.dev.js","sources":["../../node_modules/.pnpm/mitt@2.1.0/node_modules/mitt/dist/mitt.es.js","../../src/utils.js","../../src/parsing.js","../../src/statebot.js","../../src/assertions.js"],"sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i&&i.push(e)||n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&i.splice(i.indexOf(e)>>>0,1)},emit:function(t,e){(n.get(t)||[]).slice().map(function(n){n(e)}),(n.get(\"*\")||[]).slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.es.js.map\n","\n//\n// STATEBOT UTILS\n//\n\nexport {\n  isArray,\n  isEventEmitter,\n  isFunction,\n  isPojo,\n  isString,\n  isTemplateLiteral,\n  uniq,\n  Defer,\n  Once,\n  Revokable,\n  ReferenceCounter,\n  ArgTypeError,\n  Logger,\n  Pausables\n}\n\n//\n// isType\n//\n\nfunction isArray (obj) {\n  return Array.isArray(obj)\n}\n\nfunction isFunction (obj) {\n  return typeof obj === 'function'\n}\n\nfunction isString (obj) {\n  return typeof obj === 'string'\n}\n\nfunction isObject (obj) {\n  return typeof obj === 'object'\n}\n\nfunction isEventEmitter (obj) {\n  return (\n    isObject(obj) &&\n    isFunction(obj.emit) &&\n    (isFunction(obj.addListener) || isFunction(obj.on)) &&\n    (isFunction(obj.removeListener) || isFunction(obj.off))\n  )\n}\n\nfunction isPojo (obj) {\n  if (obj === null || (!isObject(obj))) {\n    return false\n  }\n  return Object.getPrototypeOf(obj) === Object.prototype\n}\n\nfunction isTemplateLiteral (obj) {\n  if (isString(obj)) {\n    return true\n  }\n  if (!isArray(obj)) {\n    return false\n  }\n  return obj.every(isString)\n}\n\n//\n// uniq\n//\n\nfunction uniq (input) {\n  return input.reduce((acc, one) =>\n    acc.indexOf(one) === -1\n      ? [...acc, one]\n      : acc\n    , []\n  )\n}\n\n//\n// defer\n//\n\nfunction defer (fn, ...args) {\n  const timer = setTimeout(fn, 0, ...args)\n  return () => clearTimeout(timer)\n}\n\nfunction Defer (fn) {\n  return (...args) => defer(fn, ...args)\n}\n\n//\n// Revokable\n//\n\nfunction Once (fn) {\n  const { revoke, fn: _fn } = Revokable(fn)\n  let result\n  return function (...args) {\n    result = _fn(...args)\n    revoke()\n    return result\n  }\n}\n\nfunction Revokable (fn) {\n  let revoked = false\n  let result\n  return {\n    fn: (...args) => {\n      if (!revoked) {\n        result = fn(...args)\n      }\n      return result\n    },\n    revoke: () => {\n      revoked = true\n    }\n  }\n}\n\n//\n// Pausables\n//\n\nfunction Pausables (startPaused = false, runFnWhenPaused = () => {}) {\n  let paused = !!startPaused\n\n  function Pausable (fn) {\n    return (...args) => {\n      if (paused) {\n        runFnWhenPaused()\n        return false\n      }\n      return fn(...args)\n    }\n  }\n\n  return {\n    Pausable,\n    paused: () => paused,\n    pause: () => { paused = true },\n    resume: () => { paused = false },\n  }\n}\n\n//\n// ReferenceCounter\n//\n\nfunction ReferenceCounter (name, kind, description, ...expecting) {\n  const _refs = [...expecting]\n    .flat()\n    .reduce((acc, ref) => ({ ...acc, [ref]: 0 }), {})\n\n  function increase (ref) {\n    _refs[ref] = countOf(ref) + 1\n    return () => decrease(ref)\n  }\n  function decrease (ref) {\n    const count = countOf(ref) - 1\n    _refs[ref] = Math.max(count, 0)\n  }\n  function countOf (ref) {\n    return _refs[ref] || 0\n  }\n  function refs () {\n    return { ..._refs }\n  }\n  function table () {\n    return Object.keys(_refs).sort()\n      .map(key => [key, _refs[key]])\n      .map(([ref, count]) => {\n        return {\n          [kind]: ref,\n          refs: count || 'None'\n        }\n      })\n  }\n  function toValue () {\n    return {\n      description: `Statebot[${name}]: ${description}:`,\n      table: table()\n    }\n  }\n  return {\n    increase,\n    decrease,\n    countOf,\n    toValue,\n    refs\n  }\n}\n\n//\n// ArgTypeError\n//\n\nconst typeErrorIfFnReturnsFalse = (argName, argTypeFn, arg) => {\n  return argTypeFn(arg)\n    ? undefined\n    : `${argTypeFn.name}(${argName}) did not return true`\n}\n\nconst typeErrorIfTypeOfFails = (argName, argType, arg) => {\n  return typeof arg === argType\n    ? undefined\n    : `Argument \"${argName}\" should be a ${argType}`\n}\n\nconst typeErrorFromArgument = (argMap, arg, index) => {\n  const { argName, argType } = argMap[index]\n  if (arg === undefined) {\n    return `Argument undefined: \"${argName}\"`\n  }\n\n  const errorDesc = isFunction(argType)\n    ? typeErrorIfFnReturnsFalse(argName, argType, arg)\n    : typeErrorIfTypeOfFails(argName, argType, arg)\n\n  if (errorDesc) {\n    return (\n      `${errorDesc}: ${argName} === ${typeof arg}(${arg})`\n    )\n  }\n}\n\n/**\n * Helper for enforcing correct argument-types.\n *\n * @private\n * @param {string} errPrefix\n *\n * @example\n * const argTypeError = ArgTypeError('namespace#')\n *\n * function myFn (myArg1, myArg2) {\n *   const err = argTypeError('myFn',\n *     { myArg1: isString, myArg2: Boolean },\n *     myArg1, myArg2\n *   )\n *   if (err) {\n *     throw new TypeError(err)\n *   }\n * }\n */\n\nfunction ArgTypeError (errPrefix = '') {\n  return function (fnName, typeMap, ...args) {\n    const signature = Object.keys(typeMap).join(', ')\n    const argMap = Object\n      .entries(typeMap)\n      .map(([argName, argType]) => ({ argName, argType }))\n\n    const err = args\n      .map((...args) => typeErrorFromArgument(argMap, ...args))\n      .filter(Boolean)\n\n    if (!err.length) {\n      return\n    }\n\n    return (\n      `\\n${errPrefix}${fnName}(${signature}):\\n` +\n      `${err.map(err => `> ${err}`).join('\\n')}`\n    )\n  }\n}\n\n//\n// Logger\n//\n\nfunction Logger (level, c = console) {\n  let _level = level\n  if (isString(_level)) {\n    _level = ({\n      info: 3,\n      log: 2,\n      warn: 1,\n      none: 0\n    })[_level] || 3\n  }\n  function canWarn () {\n    return _level >= 1\n  }\n  function canLog () {\n    return _level >= 2\n  }\n  function canInfo () {\n    return _level >= 3\n  }\n  return {\n    canWarn,\n    canLog,\n    canInfo,\n\n    info: (...args) => canInfo() && c.info(...args),\n    table: (...args) => canLog() && c.table(...args),\n    log: (...args) => canLog() && c.log(...args),\n    warn: (...args) => canWarn() && c.warn(...args),\n    error: (...args) => c.error(...args)\n  }\n}\n","\n//\n// STATEBOT CHART/ROUTE PARSING\n//\n\nconst rxCRLF = /[\\r\\n]/\nconst cxPipe = '|'\nconst cxArrow = '->'\nconst rxOperators = [cxPipe, cxArrow]\n  .map(rxUnsafe => rxUnsafe.replace('|', '\\\\|'))\n  .join('|')\n\nconst rxLineContinuations = new RegExp(`(${rxOperators})$`)\nconst rxDisallowedCharacters = /[^a-z0-9!@#$%^&*:_+=<>|~.\\x2D]/gi\nconst rxComment = /(\\/\\/[^\\n\\r]*)/\n\nexport {\n  cxPipe,\n  cxArrow,\n  rxDisallowedCharacters,\n  decomposeChart,\n  decomposeRoute\n}\n\nimport { uniq, ArgTypeError, isTemplateLiteral } from './utils'\n\nconst argTypeError = ArgTypeError('statebot.')\n\nfunction decomposeRoute (templateLiteral) {\n  const err = argTypeError('decomposeRoute',\n    { templateLiteral: isTemplateLiteral },\n    templateLiteral\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const lines = condensedLines(templateLiteral)\n  const linesOfTokens = tokenisedLines(lines)\n  const route = linesOfTokens.flat(2)\n\n  return route\n}\n\n/**\n * Decompose a {@link statebotChart} into an object of `states`, `routes`,\n * and `transitions`.\n *\n * Statebot() uses this internally to parse charts. Exposed for debugging.\n *\n * @memberof statebot\n * @function\n * @param {statebotChart} chart\n * @returns {Object}\n *\n * @example\n * var { states, routes, transitions } = decomposeChart`\n *   pending ->\n *     success | failure\n * `\n * // states = ['pending', 'success', 'failure']\n * // routes = [ 'pending->success', 'pending->failure']\n * // transitions = [\n * //   ['pending', 'success'],\n * //   ['pending', 'failure']\n * // ]\n */\n\nfunction decomposeChart (chart) {\n  const err = argTypeError('decomposeChart',\n    { chart: isTemplateLiteral },\n    chart\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const lines = condensedLines(chart)\n  const linesOfTokens = tokenisedLines(lines)\n  const linesOfRoutes = linesOfTokens\n    .map(decomposeRouteFromTokens)\n    .flat(1)\n\n  const linesOfTransitions = linesOfRoutes\n    .map(decomposeTransitionsFromRoute)\n    .flat(1)\n\n  let emptyStateFound = false\n  const routeKeys = linesOfTransitions.map(route => {\n    if (route.includes('')) {\n      emptyStateFound = true\n    }\n    return route.join(cxArrow)\n  })\n\n  const filteredRoutes = uniq(routeKeys)\n  const filteredStates = uniq(linesOfTokens.flat(3))\n\n  return {\n    transitions: filteredRoutes.map(route => route.split(cxArrow)),\n    routes: filteredRoutes,\n    states: !emptyStateFound\n      ? filteredStates.filter(Boolean)\n      : filteredStates\n  }\n}\n\nfunction linesFrom (strOrArr) {\n  return [strOrArr]\n    .flat()\n    .reduce((acc, line) => [...acc, line.split(rxCRLF)], [])\n    .flat()\n}\n\nfunction condensedLines (strOrArr) {\n  const input = linesFrom(strOrArr)\n  const output = []\n\n  let previousLineHasContinuation = false\n\n  const condenseLine = (condensedLine, line) => {\n    const sanitisedLine = line\n      .replace(rxComment, '')\n      .replace(rxDisallowedCharacters, '')\n\n    if (!sanitisedLine) {\n      return condensedLine\n    }\n\n    previousLineHasContinuation = rxLineContinuations\n      .test(sanitisedLine)\n\n    if (previousLineHasContinuation) {\n      return condensedLine + sanitisedLine\n    }\n\n    output.push(condensedLine + sanitisedLine)\n    return ''\n  }\n\n  const finalCondensedLine = input\n    .reduce(condenseLine, '')\n\n  if (previousLineHasContinuation || finalCondensedLine) {\n    return [...output, finalCondensedLine]\n  }\n\n  return [...output]\n}\n\nfunction tokenisedLines (lines) {\n  return lines\n    .map(line => line\n      .split(cxArrow)\n      .map(str => str.split(cxPipe))\n    )\n}\n\nfunction decomposeRouteFromTokens (line) {\n  const output = []\n\n  line.reduce((previousStates, states) => {\n    if (previousStates === false) {\n      return [...states]\n    }\n\n    output.push([previousStates, [...states]])\n    return [...states]\n  }, false)\n\n  return output\n}\n\nfunction decomposeTransitionsFromRoute ([fromStates, toStates]) {\n  return fromStates.reduce((acc, fromState) => [\n    ...acc,\n    ...toStates.map(toState => [fromState, toState])\n  ], [])\n}\n","\n//\n// STATEBOT FSM\n//\n\nexport {\n  Statebot,\n  isStatebot\n}\n\n/**\n * Options for creating a Statebot.\n *\n * @typedef {Object} statebotOptions\n * @property {statebotChart} chart\n *  The state-chart.\n * @property {string} [startIn=auto]\n *  The state in which to start. If unspecified, the first state in the\n *  chart will be used.\n * @property {number} [logLevel=3]\n *  How noisy the logging is, from 1 to 3:\n *  ```\n *  1) console.warn\n *  2) console.warn/log/table\n *  3) console.warn/log/table/info\n *  ```\n *  `3` is the default. Argument type-errors will always `throw`.\n * @property {number} [historyLimit=2]\n *  Limit how much history the state-machine keeps. Accessed via\n *  {@link #statebotfsmhistory|statebotFsm#history()}.\n * @property {events} [events]\n *  If you wish to have your Statebots listen to events coming from\n *  a shared EventEmitter, you can pass it in here. The `emit()`/`onEvent()`/\n *  `performTransitions()` methods will use it.\n *\n *  It should have the same signature as {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}.\n *\n *  - Since Statebot 2.5.0 {@link https://npmjs.com/mitt|mitt} is also compatible.\n *  - Since Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is used internally.\n */\n\n/**\n * A description of all the states in a machine, plus all of the\n * permitted transitions between them.\n *\n * This is defined using a `string` or an `array` of strings, but\n *  {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals|Template Literals}\n * are much more convenient.\n *\n * An arrow `->` configures a **permitted transition** between two states:\n *\n * ```\n * from-state -> to-state\n * ```\n *\n * It's the only operator needed to build any chart:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved\n *   pending -> rejected\n *   resolved -> done\n *   rejected -> done\n * `\n * ```\n *\n * The \"OR\" operator `|` can help us remove some redundancy from the above example:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved | rejected\n *   resolved | rejected -> done\n * `\n * ```\n *\n * In both charts, `pending` can transition to `resolved` or `rejected`, and\n * `resolved` or `rejected` can both transition to `done`.\n *\n * We can streamline this even further:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> (resolved | rejected) -> done\n * `\n * ```\n *\n * Again, this is exactly equivalent to the previous two examples.\n *\n * Notice in this one that we have parentheses `(` `)` surrounding `resolved`\n * and `rejected`. They are actually completely ignored by the parser, and\n * you can use them as you please to help make your charts more readable.\n *\n * A chart works exactly the same without them:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved | rejected -> done\n * `\n * ```\n *\n * Charts can also be split across multiple-lines:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending ->\n *   resolved |\n *   rejected ->\n *   done\n * `\n * ```\n * Notice that all white-space is ignored on either side of the `->`\n * and `|`.\n *\n * `// Comments of this kind are allowed, too:`\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> // Where do we go from here?\n *     (resolved | rejected) -> // Ah, yes\n *\n *   // And now we're all finished\n *   done\n * `\n * ```\n *\n * Finally, here's a more full example:\n *\n * ```js\n * var dragDropChart = `\n *   idle ->\n *     drag-detect ->\n *       (dragging | clicked)\n *\n *   // Just a click, bail-out!\n *   clicked -> idle\n *\n *   // Drag detected!\n *   dragging ->\n *     drag-wait -> dragged -> drag-wait\n *\n *   // Drag finished...\n *   (drag-wait | dragged) ->\n *     (drag-done | drag-cancel) ->\n *       idle\n * `\n * ```\n *\n * @typedef {string|string[]} statebotChart\n */\n\nconst ON_EXITING = 'onExiting'\nconst ON_ENTERING = 'onEntering'\nconst ON_EXITED = 'onExited'\nconst ON_ENTERED = 'onEntered'\nconst ON_SWITCHING = 'onSwitching'\nconst ON_SWITCHED = 'onSwitched'\n\nconst INTERNAL_EVENTS = {\n  [ON_SWITCHING]: '(ANY)state:changing',\n  [ON_SWITCHED]: '(ANY)state:changed'\n}\n\nimport mitt from 'mitt'\n\nimport {\n  isArray,\n  isEventEmitter,\n  isFunction,\n  isPojo,\n  isString,\n  ArgTypeError,\n  Logger,\n  ReferenceCounter,\n  Pausables\n} from './utils'\n\nimport { decomposeChart, cxArrow } from './parsing'\n\n/**\n * Create a {@link #statebotfsm|statebotFsm} `object`.\n *\n * @memberof statebot\n * @function\n * @example\n * var machine = Statebot('lemming', {\n *   chart: `\n *     walking -> (digging | building | falling) ->\n *       walking\n *\n *     falling -> splatting\n *     walking -> exiting\n *   `\n * })\n *\n * @param {string} name\n *  Give your Statebot a name. Used for logging and by {@link #statebotassertroute|assertRoute()}.\n * @param {statebotOptions} options\n */\n\nfunction Statebot (name, options) {\n  if (!isString(name)) {\n    throw new TypeError('\\nStatebot: Please specify a name for this machine')\n  }\n\n  const logPrefix = `Statebot[${name}]`\n  if (!isPojo(options)) {\n    throw new TypeError(`\\n${logPrefix}: Please specify options for this machine`)\n  }\n\n  const {\n    chart = undefined,\n    logLevel = 3,\n    historyLimit = 2\n  } = options || {}\n\n  const events = options.events === undefined\n    ? wrapEmitter(mitt())\n    : isEventEmitter(options.events) && wrapEmitter(options.events)\n\n  if (!events) {\n    throw new TypeError(`\\n${logPrefix}: Invalid event-emitter specified in options`)\n  }\n\n  const { states = [], routes = [] } = chart\n    ? decomposeChart(chart)\n    : options\n\n  const { startIn = states[0] } = options\n\n  if (!states.includes(startIn)) {\n    throw new Error(`${logPrefix}: Starting-state not in chart: \"${startIn}\"`)\n  }\n\n  const argTypeError = ArgTypeError(`${logPrefix}#`)\n  const _console = Logger(logLevel, console)\n  const { canWarn } = _console\n\n  const stateHistory = [startIn]\n  const stateHistoryLimit = Math.max(historyLimit, 2)\n  const internalEvents = wrapEmitter(mitt())\n\n  let transitionId = 0\n\n  const { pause, resume, paused, Pausable } = Pausables(false, () =>\n    _console.warn(`${logPrefix}: Ignoring callback, paused`)\n  )\n\n  const emitInternalEvent = Pausable((eventName, ...args) =>\n    internalEvents.emit(eventName, ...args)\n  )\n\n  function onInternalEvent (eventName, cb) {\n    internalEvents.on(eventName, cb)\n    return () => internalEvents.off(eventName, cb)\n  }\n\n  const statesHandled = ReferenceCounter(\n    name,\n    'states',\n    'Listening for the following state-changes',\n    [...states]\n  )\n  const routesHandled = ReferenceCounter(\n    name,\n    'transitions',\n    'Listening for the following transitions',\n    [...routes]\n  )\n  const eventsHandled = ReferenceCounter(\n    name,\n    'events',\n    'Listening for the following events'\n  )\n\n  // Interprets onTransitions() and performTransitions()\n  function applyHitcher (hitcher, fnName) {\n    const hitcherActions =\n      isFunction(hitcher)\n        ? hitcher({ enter, emit, Enter, Emit })\n        : isPojo(hitcher) ? hitcher : null\n\n    if (!isPojo(hitcherActions)) {\n      throw new TypeError(\n        `Statebot[${name}]#${fnName}(): Expected an object, or a function that returns an object`\n      )\n    }\n\n    const {\n      transitionsForEvents,\n      transitionsOnly\n    } = decomposeHitcherActions(hitcherActions)\n\n    const allStates = []\n    const allRoutes = []\n    const allCleanupFns = []\n\n    // Handle performTransitions() signature (configs with an event,\n    // and maybe a then-method too)\n    const decomposedEvents = Object\n      .entries(transitionsForEvents)\n      .reduce((acc, [eventName, transitionsAndAction]) => {\n        const {\n          states,\n          routes,\n          configs\n        } = expandTransitions(transitionsAndAction, canWarn)\n\n        if (canWarn()) {\n          allStates.push(...states)\n          allRoutes.push(...routes)\n        }\n        return {\n          ...acc,\n          [eventName]: configs\n        }\n      }, {})\n\n    function ifStateThenEnterState ({ fromState, toState, action, args }) {\n      return inState(fromState, () => {\n        enter(toState, ...args)\n        isFunction(action) && action(...args)\n        return true\n      })\n    }\n\n    function createEventHandlerForTransition ([eventName, configs]) {\n      return [\n        eventsHandled.increase(eventName),\n        onEvent(eventName, (...args) => {\n          const eventWasHandled = configs\n            .map(config => ({ ...config, args }))\n            .some(ifStateThenEnterState)\n\n          if (!eventWasHandled) {\n            transitionNoOp(`Event not handled: \"${eventName}\"`)\n          }\n        })\n      ]\n    }\n\n    allCleanupFns.push(\n      ...Object\n        .entries(decomposedEvents)\n        .map(createEventHandlerForTransition)\n        .flat()\n    )\n\n    // Handle onTransitions() signature (transition-only, and maybe\n    // a then-function too)\n    const transitionConfigs = expandTransitions(transitionsOnly, canWarn)\n    if (canWarn()) {\n      allStates.push(...transitionConfigs.states)\n      allRoutes.push(...transitionConfigs.routes)\n    }\n\n    function runThenMethodOnTransition (config) {\n      const { fromState, toState, action } = config\n      const route = `${fromState}->${toState}`\n      return [\n        routesHandled.increase(route),\n        onInternalEvent(route, action)\n      ]\n    }\n\n    allCleanupFns.push(\n      ...transitionConfigs.configs\n        .map(runThenMethodOnTransition)\n        .flat()\n    )\n\n    // Debugging, if we're at the right level\n    if (canWarn()) {\n      const invalidStates = allStates.filter(state => !states.includes(state))\n      const invalidRoutes = allRoutes.filter(route => !routes.includes(route))\n      if (invalidStates.length) {\n        _console.warn(\n          `Statebot[${name}]#${fnName}(): Invalid states specified:\\n` +\n          invalidStates.map(state => `  > \"${state}\"`).join('\\n')\n        )\n      }\n      if (invalidRoutes.length) {\n        _console.warn(\n          `Statebot[${name}]#${fnName}(): Invalid transitions specified:\\n` +\n          invalidRoutes.map(route => `  > \"${route}\"`).join('\\n')\n        )\n      }\n    }\n\n    return () => allCleanupFns.map(fn => fn())\n  }\n\n  function previousState () {\n    return stateHistory[stateHistory.length - 2]\n  }\n\n  function currentState () {\n    return stateHistory[stateHistory.length - 1]\n  }\n\n  function canTransitionTo (...states) {\n    const testStates = states.flat()\n    const err = argTypeError('canTransitionTo', { state: isString }, testStates[0])\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    if (!testStates.length) {\n      return false\n    }\n\n    const nextStates = statesAvailableFromHere()\n    return testStates.every(state => nextStates.includes(state))\n  }\n\n  function statesAvailableFromHere (state) {\n    const _state = state !== undefined\n      ? state\n      : currentState()\n\n    const err = argTypeError('statesAvailableFromHere', { state: isString }, _state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return routes.reduce((acc, route) => {\n      const [fromState, toState] = route\n        .split(cxArrow)\n        .map(state => state.trim())\n\n      return (fromState === _state)\n        ? [...acc, toState]\n        : acc\n    }, [])\n  }\n\n  function inState (state, anyOrFn, ...fnArgs) {\n    const err = argTypeError('inState', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    const conditionMatches = currentState() === state\n\n    if (anyOrFn === undefined) {\n      return conditionMatches\n    }\n    if (!conditionMatches) {\n      return null\n    }\n    if (isFunction(anyOrFn)) {\n      return anyOrFn(...fnArgs)\n    }\n\n    return anyOrFn\n  }\n\n  const emit = Pausable((eventName, ...args) => {\n    const err = argTypeError('emit', { eventName: isString }, eventName)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return events.emit(eventName, ...args)\n  })\n\n  const enter = Pausable((state, ...args) => {\n    const err = argTypeError('enter', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    const inState = currentState()\n    const toState = state\n\n    if (toState === inState) {\n      transitionNoOp(`Already in state: \"${toState}\"`)\n      return false\n    }\n\n    if (!states.includes(toState)) {\n      transitionNoOp(`Invalid state \"${toState}\", not switching`)\n      return false\n    }\n\n    const nextRoute = `${inState}->${toState}`\n    if (!routes.includes(nextRoute)) {\n      transitionNoOp(`Invalid transition \"${nextRoute}\", not switching`)\n      return false\n    }\n\n    // Fell-through, can enter next state\n    _console.info(`${logPrefix}: tId<${++transitionId}>: ${nextRoute}`)\n\n    stateHistory.push(toState)\n    if (stateHistory.length > stateHistoryLimit) {\n      stateHistory.shift()\n    }\n\n    emitInternalEvent(INTERNAL_EVENTS[ON_SWITCHING], toState, inState, ...args)\n    emitInternalEvent(nextRoute, ...args)\n    emitInternalEvent(INTERNAL_EVENTS[ON_SWITCHED], toState, inState, ...args)\n\n    return true\n  })\n\n  function onEvent (eventName, cb) {\n    const err = argTypeError('onEvent',\n      { eventName: isString, cb: isFunction },\n      eventName, cb\n    )\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    events.on(eventName, cb)\n    return () => events.off(eventName, cb)\n  }\n\n  const switchMethods = Object\n    .keys(INTERNAL_EVENTS)\n    .reduce((obj, methodName) => ({\n      ...obj,\n      [methodName]: cb => {\n        const err = argTypeError(methodName, { cb: isFunction }, cb)\n        if (err) {\n          throw new TypeError(err)\n        }\n\n        const decreaseRefCount = statesHandled.increase(\n          INTERNAL_EVENTS[methodName]\n        )\n        const removeEvent = onInternalEvent(\n          INTERNAL_EVENTS[methodName], cb\n        )\n\n        return () => {\n          removeEvent()\n          decreaseRefCount()\n        }\n      }\n    }), {})\n\n  const enterExitMethods = [\n    [ON_EXITING, ON_SWITCHING],\n    [ON_ENTERING, ON_SWITCHING],\n    [ON_EXITED, ON_SWITCHED],\n    [ON_ENTERED, ON_SWITCHED]\n  ]\n    .reduce((obj, names) => {\n      const [methodName, switchMethod] = names\n      const name = methodName.slice(2)\n      const eventName = name.toLowerCase()\n\n      return {\n        ...obj,\n        [methodName]: (state, cb) => {\n          const err = argTypeError(methodName,\n            { state: isString, cb: isFunction },\n            state, cb\n          )\n          if (err) {\n            throw new TypeError(err)\n          }\n\n          const decreaseRefCounts = [\n            statesHandled.increase(state),\n            statesHandled.increase(`${state}:${eventName}`)\n          ]\n\n          const removeEvent = switchMethods[switchMethod](\n            (toState, fromState, ...args) => {\n              if (name.indexOf('Exit') === 0) {\n                state === fromState && cb(toState, ...args)\n              } else {\n                state === toState && cb(fromState, ...args)\n              }\n            }\n          )\n\n          return () => {\n            removeEvent()\n            decreaseRefCounts.map(fn => fn())\n          }\n        }\n      }\n    }, {})\n\n  function Emit (eventName, ...curriedArgs) {\n    const err = argTypeError('Emit', { eventName: isString }, eventName)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return (...args) => emit(eventName, ...[...curriedArgs, ...args])\n  }\n\n  function Enter (state, ...curriedArgs) {\n    const err = argTypeError('Enter', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return (...args) => enter(state, ...[...curriedArgs, ...args])\n  }\n\n  function InState (state, anyOrFn, ...curriedFnArgs) {\n    const err = argTypeError('InState', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return (...fnArgs) =>\n      inState(state, anyOrFn, ...curriedFnArgs.concat(fnArgs))\n  }\n\n  function reset () {\n    _console.warn(`${logPrefix}: State-machine reset!`)\n\n    stateHistory.length = 0\n    stateHistory.push(startIn)\n  }\n\n  function transitionNoOp (message) {\n    const lastState = previousState()\n    const inState = currentState()\n    const prevRoute =\n      `${lastState === undefined ? '[undefined]' : lastState}->${inState}`\n\n    const availableStates = statesAvailableFromHere()\n    if (!availableStates.length) {\n      _console.info(\n        `${logPrefix}: ${message}\\n` +\n          `  > Previous transition: \"${prevRoute}\"\\n` +\n          `  > There are no states available from \"${inState}\"`\n      )\n    } else {\n      _console.info(\n        `${logPrefix}: ${message}\\n` +\n          `  > Previous transition: \"${prevRoute}\"\\n` +\n          `  > From \"${inState}\", valid states are: [${availableStates\n            .map(state => `\"${state}\"`)\n            .join(', ')}]`\n      )\n    }\n  }\n\n  function inspect () {\n    return {\n      states: statesHandled.refs(),\n      transitions: routesHandled.refs(),\n      events: eventsHandled.refs()\n    }\n  }\n\n  function info () {\n    _console.log(`${logPrefix}: Information about this state-machine`)\n\n    logRefCounterInfo(statesHandled)\n    logRefCounterInfo(routesHandled)\n    logRefCounterInfo(eventsHandled)\n  }\n\n  function logRefCounterInfo (refCounter) {\n    const { description, table } = refCounter.toValue()\n    _console.log(description)\n    if (table.length) {\n      _console.table(table)\n    } else {\n      _console.log('  > No information')\n    }\n  }\n\n  /**\n   * A state-machine object created by\n   * {@link #statebotstatebot|Statebot()}.\n   * @typedef {Object} statebotFsm\n   */\n\n  return {\n    /**\n     * For identifying Statebot objects.\n     *\n     * @private\n     */\n    __STATEBOT__: 1,\n\n    /**\n     * Tests to see if we can transition to the specified state from\n     * the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * If more than one state is specified, `true` is returned only if\n     * **ALL** states are available.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string|string[]} states\n     * @returns {boolean}\n     * @example\n     * var machine = Statebot('game-menus', {\n     *   chart: `\n     *     loading ->\n     *       menu ->\n     *         play |\n     *         options |\n     *         sound |\n     *         quit\n     *\n     *     // Go back to menu\n     *     play | options | sound -> menu\n     *\n     *     // Can quit from main game, too\n     *     play -> quit\n     *   `\n     * })\n     *\n     * machine.canTransitionTo('play')\n     * // false\n     *\n     * machine.enter('menu')\n     * machine.canTransitionTo(['play', 'options'])\n     * // true\n     */\n    canTransitionTo,\n\n    /**\n     * Returns the current state.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string}\n     *\n     * @example\n     * var machine = Statebot('coroutine', {\n     *   chart: `\n     *     suspended -> running -> (suspended | dead)\n     *   `\n     * })\n     *\n     * machine.currentState()\n     * // \"suspended\"\n     */\n    currentState,\n\n    /**\n     * Immediately emits an event, firing any listeners added using\n     * {@link #statebotfsmperformtransitions|.performTransitions()} or {@link #statebotfsmonevent|.onEvent()}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} eventName\n     * @param {...*} [args]\n     *  Optional arguments to pass to listeners.\n     * @returns {boolean}\n     *  Whether or not the event had listeners.\n     *\n     *  See: {@link https://nodejs.org/api/events.html#events_emitter_emit_eventname_args|Node Events}\n     *  for more information.\n     *\n     * Statebot imports `EventEmitter` from the\n     *  {@link https://www.npmjs.com/package/events|events}\n     * package for dealing with events in the browser.\n     *\n     * Since Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is\n     * used for both the browser and non-browser builds.\n     *\n     * @example\n     * var machine = Statebot('basic-form', {\n     *   chart: `\n     *     idle -> sending -> redirect\n     *   `\n     * })\n     *\n     * machine.performTransitions({\n     *   'idle -> sending': {\n     *     on: 'post-data',\n     *     then: (...args) => {\n     *       console.log('Event args: ', args)\n     *       // setTimeout(machine.Enter('redirect'), 5000)\n     *     }\n     *   }\n     * })\n     *\n     * machine.emit('post-data', 'Hello, world!')\n     * // Event args: [\"Hello, world!\"]\n     *\n     * machine.currentState()\n     * // \"sending\"\n     */\n    emit,\n\n    /**\n     * Creates a function that emits the specified event.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsmemit|.emit()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} eventName\n     *  The desired event to {@link #statebotfsmemit|.emit()}.\n     * @param {...*} [curriedArgs]\n     *  Arguments that will curry into the returned `emit()` function\n     *  whenever it is called.\n     * @returns {function} A function that emits that event.\n     *\n     * @example\n     * var machine = Statebot('traffic-lights', {\n     *   chart: `\n     *     go ->\n     *       prepare-to-stop ->\n     *       stop\n     *\n     *     // ...gotta keep that traffic flowing\n     *     stop ->\n     *       prepare-to-go ->\n     *       go\n     *   `,\n     *   startIn: 'stop'\n     * })\n     *\n     * machine.performTransitions({\n     *   'stop -> prepare-to-go':   { on: 'timer' },\n     *   'prepare-to-go -> go':     { on: 'timer' },\n     *   'go -> prepare-to-stop':   { on: 'timer' },\n     *   'prepare-to-stop -> stop': { on: 'timer' }\n     * })\n     *\n     * var nextTrafficLight = machine.Emit('timer')\n     * machine.currentState()\n     * // \"stop\"\n     *\n     * nextTrafficLight()\n     * nextTrafficLight()\n     * nextTrafficLight()\n     *\n     * machine.currentState()\n     * // \"prepare-to-stop\"\n     */\n    Emit,\n\n    /**\n     * Immediately changes to the specified state, so long as it is\n     * accessible from the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The desired state to switch-to.\n     * @param {...*} [args]\n     *  Optional arguments to pass to transition callbacks.\n     * @returns {boolean} Whether or not the state changed.\n     *\n     * @example\n     * var machine = Statebot('dialog', {\n     *   chart: `\n     *     idle -> showing-modal -> (saving | idle)\n     *       saving -> idle\n     *   `\n     * })\n     *\n     * machine.currentState()\n     * // \"idle\"\n     *\n     * machine.enter('saving')\n     * // false\n     *\n     * // [dialog]: Invalid transition \"idle->saving\", not switching\n     * // > Previous transition: \"[undefined]->idle\"\n     * // > From \"idle\", valid states are: [\"showing-modal\"]\n     *\n     * machine.enter('showing-modal')\n     * // true\n     */\n    enter,\n\n    /**\n     * Creates a function that changes to the specified state, so long\n     * as it is accessible from the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsmenter|.enter()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The desired state to switch-to.\n     * @param {...*} [curriedArgs]\n     *  Arguments that will curry into the returned `enter()` function\n     *  whenever it is called.\n     * @returns {function}\n     *  A function that can change the state when called.\n     *\n     * @example\n     * var machine = Statebot('popup-menu', {\n     *   chart: `\n     *     idle -> menu-opened ->\n     *       (item-clicked | idle)\n     *\n     *     item-clicked -> idle\n     *   `,\n     *   startIn: 'menu-opened'\n     * })\n     *\n     * button.onclick = machine.Enter('item-clicked')\n     * machine.currentState()\n     * // \"menu-opened\"\n     *\n     * button.onclick()\n     * machine.currentState()\n     * // \"item-clicked\"\n     */\n    Enter,\n\n    /**\n     * Returns all states the machine has been in so far, up to a limit set\n     * by `historyLimit` in {@link statebotOptions}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string[]} A copy of the state-history.\n     *\n     * @example\n     * var machine = Statebot('downloader', {\n     *   chart: `\n     *     loading -> (failure | success)\n     *       failure -> loading\n     *       success -> done\n     *   `,\n     *   historyLimit: 4\n     * })\n     *\n     * machine.enter('failure')\n     * machine.enter('loading')\n     * machine.enter('success')\n     * machine.enter('done')\n     * machine.history()\n     * // [\"failure\", \"loading\", \"success\", \"done\"]\n     */\n    history: () => [...stateHistory],\n\n    /**\n     * Print information about the current machine to the console.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.info()\n     * // [half-duplex]: Information about this state-machine.\n     * // [half-duplex]: Listening for the following state-changes:\n     * // ┌─────────┬─────────────┬────────┐\n     * // │ (index) │   states    │   #    │\n     * // ├─────────┼─────────────┼────────┤\n     * // │    0    │   'done'    │ 'None' │\n     * // │    1    │   'idle'    │ 'None' │\n     * // │    2    │ 'receiving' │ 'None' │\n     * // │    3    │  'sending'  │ 'None' │\n     * // └─────────┴─────────────┴────────┘\n     * // [half-duplex] Listening for the following transitions:\n     * // ┌─────────┬───────────────────┬────────┐\n     * // │ (index) │    transitions    │   #    │\n     * // ├─────────┼───────────────────┼────────┤\n     * // │    0    │ 'idle->receiving' │ 'None' │\n     * // │    1    │  'idle->sending'  │ 'None' │\n     * // │    2    │ 'receiving->done' │ 'None' │\n     * // │    3    │  'sending->done'  │ 'None' │\n     * // └─────────┴───────────────────┴────────┘\n     * // [half-duplex]: Listening for the following events:\n     * // (No information)\n     */\n    info: () => info(),\n\n    /**\n     * Get information about the current machine.\n     *\n     * Same details as {@link #statebotfsminfo|.info()} in object-form.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @returns {object}\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.inspect()\n     * // Will return an object with the following signature:\n     * //  { states, transitions, events }\n     *\n     * // These will each have key-values, the key being the name\n     * // and the value being the number of listeners attached.\n     */\n    inspect: () => inspect(),\n\n    /**\n     * Checks if the {@link #statebotfsmcurrentstate|.currentState()}\n     * matches the specified `state`, immediately returning either\n     * `true` or `false`.\n     *\n     * If `outputWhenTrue` is specified, then it will be returned\n     * instead of `true`, and `null` will be returned instead of\n     *  `false`.\n     *\n     * If a function is specified, then its return-value will be used\n     * as the `true`-value.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state to test against.\n     * @param {any|function} [outputWhenTrue]\n     *  Optional `true`-value. If a function is specified, it will be\n     *  called and its return value will be used.\n     * @param {...*} [fnArgs]\n     *  Arguments that will pass into `outputWhenTrue()` if it has\n     *  been defined as a function.\n     * @returns {boolean|null|*}\n     *\n     * @example\n     * var machine = Statebot('little-revver', {\n     *   chart: `\n     *     idle ->\n     *       (gear-1 | gear-2 | reverse) ->\n     *     idle\n     *   `\n     * })\n     *\n     * machine.inState('idle')\n     * // true\n     *\n     * machine.inState('idle', 'Purrrr...')\n     * // \"Purrrr...\"\n     *\n     * machine.enter('gear-1')\n     * machine.inState('idle', () => {\n     *   console.log('Idling!')\n     *   return 'Purrrr...'\n     * })\n     * // null\n     * // ^ the function is not called at all in the `false` case,\n     * //   so no console.log either.\n     */\n    inState,\n\n    /**\n     * Returns a function which, when run, tests that\n     * {@link #statebotfsmcurrentstate|.currentState()} matches the\n     * specified state, returning either `true` or `false`.\n     *\n     * If `outputWhenTrue` is specified, then it will be returned\n     * instead of `true`, and `null` will be returned instead of\n     *  `false`.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsminstate|.inState()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state to test against.\n     * @param {any|function} [outputWhenTrue]\n     *  Optional `true`-value. If a function is specified, it will be\n     *  called and its return value will be used.\n     * @param {...*} [curriedFnArgs]\n     *  Arguments that will curry into `outputWhenTrue()` if it has\n     *  been defined as a function.\n     * @returns {function}\n     *  A function that calls {@link #statebotfsminstate|.inState()}.\n     *\n     * @example\n     * var machine = Statebot('little-revver', {\n     *   chart: `\n     *     idle ->\n     *       (gear-1 | gear-2 | reverse) ->\n     *     idle\n     *   `\n     * })\n     *\n     * var idling = machine.InState('idle')\n     * var purring = machine.InState('idle', () => {\n     *   console.log('Idling!')\n     *   return 'Purrrr...'\n     * })\n     *\n     * idling()\n     * // true\n     *\n     * purring()\n     * // Idling!\n     * // \"Purrrr...\"\n     *\n     * machine.enter('gear-1')\n     * purring()\n     * // null\n     * // ^ the function is not called at all in the `false` case,\n     * //   so no console.log either.\n     */\n    InState,\n\n    /**\n     * Returns the name of the state-machine.\n     *\n     * Used for logging and also by {@link #statebotassertroute|assertRoute()}\n     * for the same.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string} The name of the state-machine.\n     *\n     * @example\n     * var machine = Statebot('Ay, there’s the rub.', {\n     *   chart: `\n     *     the-question -> (to-be | not-to-be)\n     *       not-to-be -> perchance-to-dream\n     *   `\n     * })\n     *\n     * machine.name()\n     * // \"Ay, there’s the rub.\"\n     */\n    name: () => name,\n\n    /**\n     * Adds a listener that runs a callback immediately **AFTER** the\n     * specified-state becomes the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {enterCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onEntered('done', fromState => {\n     *   console.log('Entered from:', fromState)\n     * })\n     *\n     * machine.enter('receiving')\n     * machine.enter('done')\n     * // Entered from: receiving\n     */\n    onEntered: enterExitMethods[ON_ENTERED],\n\n    /**\n     * Adds a listener that runs a callback immediately **BEFORE** the\n     * specified-state becomes the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {enterCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onEntered('done', () => {\n     *   console.log('We made it!')\n     * })\n     *\n     * machine.onEntering('done', fromState => {\n     *   console.log('Entering from:', fromState)\n     * })\n     *\n     * machine.enter('sending')\n     * machine.enter('done')\n     * // Entering from: sending\n     * // We made it!\n     */\n    onEntering: enterExitMethods[ON_ENTERING],\n\n    /**\n     * {@link #statebotfsmonentering .onEntering()} /\n     * {@link #statebotfsmonentered .onEntered()} callback signature.\n     *\n     * @callback enterCallback\n     * @param {string} fromState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Adds a listener that runs a callback immediately after the specified\n     * event is called.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} name The event name.\n     * @param {function} cb The callback.\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('traffic-lights', {\n     *   chart: `\n     *     go ->\n     *       prepare-to-stop ->\n     *       stop\n     *\n     *     // ...gotta keep that traffic flowing\n     *     stop ->\n     *       prepare-to-go ->\n     *       go\n     *   `\n     * })\n     *\n     * machine.performTransitions({\n     *   'stop -> prepare-to-go -> go':   { on: 'timer' },\n     *   'go -> prepare-to-stop -> stop': { on: 'timer' },\n     * })\n     *\n     * machine.onEvent('timer', () => {\n     *   redrawTrafficLights()\n     * })\n     *\n     * setInterval(machine.Emit('timer'), 2000)\n     */\n    onEvent,\n\n    /**\n     * Adds a listener that runs a callback immediately **AFTER** the\n     * specified-state is no longer the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {exitCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onExited('idle', toState => {\n     *   console.log('We are heading to:', toState)\n     * })\n     *\n     * machine.enter('sending')\n     * // We are heading to: sending\n     */\n    onExited: enterExitMethods[ON_EXITED],\n\n    /**\n     * Adds a listener that runs a callback immediately **BEFORE** the\n     * specified-state is no longer the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {exitCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onExited('idle', () => {\n     *   console.log('Peace out!')\n     * })\n     *\n     * machine.onExiting('idle', toState => {\n     *   console.log('Heading to:', toState)\n     * })\n     *\n     * machine.enter('receiving')\n     * machine.enter('done')\n     * // Heading to: receiving\n     * // Peace out!\n     */\n    onExiting: enterExitMethods[ON_EXITING],\n\n    /**\n     * {@link #statebotfsmonexiting .onExiting()} /\n     * {@link #statebotfsmonexited .onExited()} callback signature.\n     *\n     * @callback exitCallback\n     * @param {string} toState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Adds a listener that runs a callback immediately after **ANY**\n     * state-change.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {switchCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onSwitched((toState, fromState) => {\n     *   console.log(`We went from \"${fromState}\" to \"${toState}\"`)\n     * })\n     *\n     * machine.enter('receiving')\n     * // We went from \"idle\" to \"receiving\"\n     */\n    onSwitched: switchMethods[ON_SWITCHED],\n\n    /**\n     * Adds a listener that runs a callback immediately before **ANY**\n     * state-change.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {switchCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onSwitching((toState, fromState) => {\n     *   console.log(`Going from \"${fromState}\" to \"${toState}\"`)\n     * })\n     *\n     * machine.enter('receiving')\n     * // Going from \"idle\" to \"receiving\"\n     */\n    onSwitching: switchMethods[ON_SWITCHING],\n\n    /**\n     * {@link #statebotfsmonswitching .onSwitching()} /\n     * {@link #statebotfsmonswitched .onSwitched()} callback signature.\n     *\n     * @callback switchCallback\n     * @param {string} toState\n     * @param {string} fromState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Run callbacks when transitions happen.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {object|function} transitions\n     *  Configuration in the form of an object, or a function that\n     *  returns an object. If a function is used, there will be a single\n     *  argument passed-in: an object with the following methods\n     *  attached as a convenience:\n     *\n     *  - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}\n     *\n     * @returns {function} A function that removes all listeners added\n     *  by this method.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onTransitions({\n     *   'idle -> sending': () => {\n     *     sendData()\n     *       .then(machine.Enter('done', 'sent'))\n     *       .catch(machine.Enter('done', 'failed'))\n     *   },\n     *   'idle -> receiving': () => {\n     *     receiveData()\n     *       .then(machine.Enter('done', 'received'))\n     *       .catch(machine.Enter('done', 'failed'))\n     *   },\n     *   'sending | receiving -> done': whatHappened => {\n     *     console.log('All finished: ', whatHappened)\n     *   }\n     * })\n     *\n     * machine.enter('sending')\n     *\n     * function sendData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     *\n     * function receiveData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     *\n     * @example\n     * // The above example using a function for config\n     * machine.onTransitions(({ Enter }) => ({\n     *   'idle -> sending': () => {\n     *     sendData()\n     *       .then(Enter('done', 'sent'))\n     *       .catch(Enter('done', 'failed'))\n     *   },\n     *   'idle -> receiving': () => {\n     *     receiveData()\n     *       .then(Enter('done', 'received'))\n     *       .catch(Enter('done', 'failed'))\n     *   },\n     *   'sending | receiving -> done': whatHappened => {\n     *     console.log('All finished: ', whatHappened)\n     *   }\n     * }))\n     *\n     * // etc...\n     */\n    onTransitions: transitions => applyHitcher(transitions, 'onTransitions'),\n\n    /**\n     * Pause the machine. {@link #statebotfsmemit|.emit()} and {@link #statebotfsmenter|.enter()} will be no-ops until\n     * the machine is {@link #statebotfsmresume|.resume()}'d.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     */\n    pause,\n\n    /**\n     * Returns `true` if the machine is {@link #statebotfsmpause|.pause()}'d\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {boolean}\n     */\n    paused,\n\n    /**\n     * Perform transitions when events happen.\n     *\n     * Use `then` to optionally add callbacks to those transitions.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {object|function} transitions\n     *  Configuration in the form of an object, or a function that\n     *  returns an object. If a function is used, there will be a single\n     *  argument passed-in: an object with the following methods\n     *  attached as a convenience:\n     *\n     *  - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}\n     *\n     * @returns {function} A function that removes all listeners added\n     *  by this method.\n     *\n     * @example\n     * var machine = Statebot('complex-form', {\n     *   chart: `\n     *     idle ->\n     *       update\n     *\n     *     // Maybe things take a long time...\n     *     update ->\n     *       waiting -> waiting-a-while\n     *\n     *     // Which path will we take?\n     *     waiting | waiting-a-while ->\n     *       success | failed | timeout\n     *\n     *     // All done!\n     *     success | failed | timeout ->\n     *       done\n     *   `\n     * })\n     *\n     * machine.performTransitions(({ Enter, emit }) => ({\n     *   'idle -> update': {\n     *     on: 'user-saved',\n     *     then: (data) => {\n     *       console.log('Sending data: ', data)\n     *\n     *       sendData(data)\n     *         .then(Enter('success'))\n     *         .catch(Enter('failed'))\n     *\n     *       emit('data-sent')\n     *     }\n     *   },\n     *   'update -> waiting': {\n     *     on: 'data-sent',\n     *     then: () => {\n     *       setTimeout(Enter('waiting-a-while'), 750)\n     *       setTimeout(Enter('timeout'), 5000)\n     *     }\n     *   }\n     * }))\n     *\n     * // Just to illustrate that you can mix n' match with onTransitions:\n     * machine.onTransitions({\n     *   'waiting | waiting-a-while -> success': () => {\n     *     console.log('Lovely!')\n     *   },\n     *   'waiting | waiting-a-while -> timeout': () => {\n     *     console.log('Well, at least you have your shoes')\n     *   }\n     * })\n     *\n     * machine.emit('user-saved', ['some', 'data'])\n     * // Sending data: [\"some\", \"data\"]\n     *\n     * function sendData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     */\n    performTransitions: transitions => applyHitcher(transitions, 'performTransitions'),\n\n    /**\n     * Returns the previous state.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string|undefined}\n     *  The previous state, or `undefined` if there isn't one (ie; you\n     *  have just called {@link #statebotfsmreset|.reset()}, or the\n     *  machine has just started.)\n     *\n     * @example\n     * var machine = Statebot('simple-sender', {\n     *   chart: `\n     *     idle -> sending -> done\n     *   `\n     * })\n     *\n     * machine.enter('sending')\n     * machine.previousState()\n     * // \"idle\"\n     */\n    previousState,\n\n    /**\n     * Returns the state-machine to its starting-state and clears the\n     * state-history.\n     *\n     * All listeners will still be attached, but no events or\n     * transitions will be fired. The pause-state will be maintained.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     *\n     * @example\n     * var machine = Statebot('carousel', {\n     *   chart: `\n     *     page-1 ->\n     *     page-2 ->\n     *     page-3 ->\n     *     page-4 -> page-1\n     *   `\n     * })\n     *\n     * machine.enter('page-2')\n     * machine.reset()\n     * machine.currentState()\n     * // \"page-1\"\n     */\n    reset,\n\n    /**\n     * Resume a {@link #statebotfsmpause|.pause()}'d machine.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     */\n    resume,\n\n    /**\n     * Return an `array` of states accessible from the state specified.\n     * If no state is passed-in, the {@link #statebotfsmcurrentstate|.currentState()} is used.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} [state] The state to check. {@link #statebotfsmcurrentstate|.currentState()}\n     *  if unspecified.\n     * @returns {String[]}\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.statesAvailableFromHere()\n     * // [\"sending\", \"receiving\"]\n     *\n     * machine.statesAvailableFromHere('receiving')\n     * // [\"done\"]\n     */\n    statesAvailableFromHere\n  }\n}\n\nfunction decomposeHitcherActions (hitcherActions) {\n  // For: performTransitions()\n  const transitionsForEvents = {}\n\n  // For: onTransitions()\n  const transitionsOnly = []\n\n  Object\n    .entries(hitcherActions)\n    .map(([routeChart, actionFnOrConfigObj]) => {\n      if (isFunction(actionFnOrConfigObj)) {\n        transitionsOnly.push({ routeChart, action: actionFnOrConfigObj })\n        return\n      }\n      if (!isPojo(actionFnOrConfigObj)) {\n        return\n      }\n\n      const { on: _on, then: _then } = actionFnOrConfigObj\n      const hasValidEventNames = isString(_on) || isArray(_on)\n      if (hasValidEventNames) {\n        const eventNames = [_on].flat()\n        eventNames.map(name => {\n          transitionsForEvents[name] = transitionsForEvents[name] || []\n          transitionsForEvents[name].push({ routeChart, action: _then })\n        })\n        return\n      }\n\n      // Behave like onTransitions() if a \"then\" is specified but\n      // there is no \"on\" event that triggers it\n      if (isFunction(_then)) {\n        transitionsOnly.push({ routeChart, action: actionFnOrConfigObj })\n      }\n    })\n\n  return { transitionsForEvents, transitionsOnly }\n}\n\nfunction expandTransitions (configs, canWarn) {\n  const allStates = []\n  const allRoutes = []\n\n  const _configs = configs.reduce((acc, config) => {\n    const { routeChart, action } = config\n    const { states, routes, transitions } = decomposeChart(routeChart)\n    if (canWarn()) {\n      allStates.push(...states)\n      allRoutes.push(...routes)\n    }\n    return [\n      ...acc,\n      ...transitions.map(([fromState, toState]) =>\n        ({ fromState, toState, action })\n      )\n    ]\n  }, [])\n\n  return {\n    configs: _configs,\n    states: allStates,\n    routes: allRoutes\n  }\n}\n\n/**\n * Tests that an object is a {@link #statebotfsm|statebotFsm}.\n *\n * @memberof statebot\n * @function\n * @example\n * var machine = Statebot(...)\n *\n * isStatebot(machine)\n * // true\n *\n * @param {any} object The object to test.\n * @returns {boolean}\n */\n\nfunction isStatebot (object) {\n  return (\n    isPojo(object) &&\n    typeof object.__STATEBOT__ === 'number'\n  )\n}\n\nfunction wrapEmitter (events) {\n  const emit = (eventName, ...args) =>\n    events.emit(eventName, args)\n\n  const addListener = events.addListener\n    ? (...args) => events.addListener(...args)\n    : (...args) => events.on(...args)\n\n  const removeListener = events.removeListener\n    ? (...args) => events.removeListener(...args)\n    : (...args) => events.off(...args)\n\n  const wrapMap = new Map()\n\n  function on (eventName, fn) {\n    let fnMeta = wrapMap.get(fn)\n    if (!fnMeta) {\n      fnMeta = {\n        handleEvent: (args = []) => fn(...args),\n        refCount: 0\n      }\n      wrapMap.set(fn, fnMeta)\n    }\n\n    fnMeta.refCount += 1\n    addListener(eventName, fnMeta.handleEvent)\n  }\n\n  function off (eventName, fn) {\n    let fnMeta = wrapMap.get(fn)\n    if (!fnMeta) {\n      return\n    }\n\n    removeListener(eventName, fnMeta.handleEvent)\n    fnMeta.refCount -= 1\n    if (fnMeta.refCount === 0) {\n      wrapMap.delete(fn)\n    }\n  }\n\n  return {\n    emit,\n    on,\n    off\n  }\n}\n","\n//\n// STATEBOT ASSERTION HELPERS\n//\n\nexport {\n  routeIsPossible,\n  assertRoute\n}\n\nimport { isStatebot } from './statebot'\nimport { decomposeRoute } from './parsing'\nimport {\n  Defer,\n  Once,\n  Revokable,\n  Logger,\n  ArgTypeError,\n  isTemplateLiteral\n} from './utils'\n\nconst argTypeError = ArgTypeError('statebot.')\n\n/**\n * Assert that a certain route can be followed by a\n * {@link #statebotfsm|statebotFsm}.\n *\n * This merely tests that a certain path can be taken through a\n * state-machine. It doesn't assert that the states are moved-through\n * while the machine is working, as with\n * {@link #statebotassertroute|assertRoute()}.\n *\n * @memberof statebot\n * @function\n * @param {statebotFsm} machine\n *  The machine to test the route on.\n * @param {string|string[]} route\n *  The route to test as an arrow-delimited string:\n *\n *  `\n *  \"idle -> pending -> success -> done\"\n *  `\n * @returns {boolean}\n *\n * @example\n * var machine = Statebot(...)\n *\n * routeIsPossible(machine,\n *   'walking -> falling -> splatting -> walking'\n * )\n * // false\n */\n\nfunction routeIsPossible (machine, route) {\n  const err = argTypeError('routeIsPossible',\n    { machine: isStatebot, route: isTemplateLiteral },\n    machine, route\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const _route = decomposeRoute(route)\n  return _route.every((state, index) => {\n    if (index === _route.length - 1) {\n      return true\n    } else {\n      const nextState = _route[index + 1]\n      const availableStates = machine.statesAvailableFromHere(state)\n      const passes = availableStates.includes(nextState)\n      return passes\n    }\n  })\n}\n\nlet assertionId = 0\n\n/**\n * {@link #statebotassertroute|assertRoute()} options.\n * @typedef {Object} assertRouteOptions\n * @property {string} [description]\n *  Describe the success-condition for this assertion.\n * @property {string} [fromState=\"\"]\n *  Wait for the machine to be in this state before assertion begins.\n * @property {function} [run]\n *  Run this function just before starting the assertion.\n * @property {number} [permittedDeviations=0]\n *  If we hit an unexpected state during assertion, this is a \"deviation\".\n *  It might be that the FSM will come back to the expected state again\n *  after a certain number of these. For example, if your FSM has a\n *  \"retry\" route configured, this number can account for it.\n * @property {number} [timeoutInMs=1000]\n *  Permitted length of time for the entire assertion, in milliseconds.\n * @property {number} [logLevel=3]\n *  Normally we want logs for assertions, right? Well, you can tune\n *  them just like you can with {@link #statebotoptions|statebotOptions}.\n */\n\n/**\n * Assert that a {@link #statebotfsm|statebotFsm} traced the route specified.\n *\n * Whereas {@link #statebotrouteispossible|routeIsPossible()} only checks\n * that a particular route can be followed, `assertRoute` will hook-into\n * a machine and wait for it to trace the specified path within a\n * timeout period.\n *\n * @memberof statebot\n * @function\n * @async\n * @param {statebotFsm} machine\n *  The machine to run the assertion on.\n * @param {string|string[]} expectedRoute\n *  The expected route as an arrow-delimited string:\n *\n *  `\n *  \"idle -> pending -> success -> done\"\n *  `\n * @param {assertRouteOptions} [options]\n * @returns {Promise}\n *\n * @example\n * var machine = Statebot(...)\n *\n * assertRoute(\n *   machine, 'prepare -> debounce -> sending -> done -> idle',\n *   {\n *     description: 'Email sent with no issues',\n *     fromState: 'idle',\n *     timeoutInMs: 1000 * 20,\n *     permittedDeviations: 0,\n *     logLevel: 3\n *   }\n * )\n * .then(() => console.log('Assertion passed!'))\n * .catch(err => console.error(`Whoops: ${err}`))\n *\n * machine.enter('idle')\n */\n\nfunction assertRoute (machine, expectedRoute, options) {\n  const err = argTypeError('assertRoute',\n    { machine: isStatebot, expectedRoute: isTemplateLiteral },\n    machine, expectedRoute\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  assertionId += 1\n\n  const {\n    description = 'Assertion complete',\n    fromState = '',\n    run = () => {},\n    permittedDeviations = 0,\n    timeoutInMs = 1000,\n    logLevel = 3\n  } = options || {}\n\n  const console = Logger(logLevel)\n\n  const prefix = `Statebot[${machine.name()}]: aId<${assertionId}>`\n  const route = decomposeRoute(expectedRoute)\n\n  console.log(`\\n${prefix}: Asserting route: [${route.join(' > ')}]`)\n  console.log(`${prefix}: > Assertion will start from state: \"${fromState}\"`)\n\n  const fromStateActionFn = Defer(run)\n  let removeFromStateActionFn = () => { }\n\n  const totalTimeTaken = TimeTaken()\n  let stateTimeTaken = TimeTaken()\n  let assertionTimeoutTimer\n  let deviations = 0\n  let pending = true\n  let unexpected = false\n\n  const consumeRoute = [...route]\n  const report = Table(\n    ['state', 'expected', 'info', 'took'],\n    ['center', 'center', 'left', 'right']\n  )\n\n  const finaliseReport = Once(err => {\n    addRow('', '', '', 'TOTAL: ' + totalTimeTaken())\n    report.lock()\n    console.log(`\\n${prefix}: ${description}: [${err ? 'FAILED' : 'SUCCESS'}]`)\n    console.table(report.content())\n    return err\n  })\n\n  const { addRow } = report\n  function enteredState (state) {\n    if (pending) {\n      addRow(state, '-', 'PENDING')\n    } else {\n      const expectedState = consumeRoute[0]\n      if (expectedState === state) {\n        addRow(state, expectedState, unexpected ? 'REALIGNED' : 'OKAY', stateTimeTaken())\n        unexpected = false\n        consumeRoute.shift()\n      } else {\n        addRow(state, expectedState, 'WRONG STATE', stateTimeTaken())\n        unexpected = true\n        deviations += 1\n      }\n      stateTimeTaken = TimeTaken()\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    if (consumeRoute.length === 0) {\n      reject(finaliseReport(new Error('NO ROUTE TO TEST')))\n      return\n    }\n\n    const clearTimeoutAndResolve = (...args) => {\n      clearTimeout(assertionTimeoutTimer)\n      removeFromStateActionFn()\n      removeOnSwitchingListener()\n      resolve(...args)\n    }\n\n    const clearTimeoutAndReject = err => {\n      clearTimeout(assertionTimeoutTimer)\n      removeFromStateActionFn()\n      removeOnSwitchingListener()\n      reject(err)\n    }\n\n    const bailout = message => {\n      while (consumeRoute.length) {\n        const expectedState = consumeRoute.shift()\n        addRow(machine.currentState(), `(${expectedState})`, message)\n        unexpected = false\n      }\n      clearTimeoutAndReject(finaliseReport(new Error(message)))\n    }\n\n    if (machine.inState(fromState)) {\n      pending = false\n      removeFromStateActionFn = fromStateActionFn()\n    }\n\n    const { revoke, fn } = Revokable(state => {\n      assertionTimeoutTimer = setTimeout(() => {\n        revoke()\n        bailout('TIMEOUT')\n      }, timeoutInMs)\n\n      enteredState(state)\n      if (pending && state === fromState) {\n        pending = false\n        removeFromStateActionFn = fromStateActionFn()\n      }\n      if (deviations > permittedDeviations) {\n        revoke()\n        bailout('TOO MANY DEVIATIONS')\n      }\n      if (consumeRoute.length <= 0) {\n        revoke()\n        clearTimeoutAndResolve(finaliseReport())\n      }\n    })\n\n    const removeOnSwitchingListener = machine.onSwitching(fn)\n  })\n}\n\nfunction Table (columns = [], alignments = []) {\n  const table = []\n  const alignment = columns.map((_, index) => alignments[index] || 'center')\n\n  let locked = false\n  function lock () {\n    locked = true\n  }\n\n  function addRow (...args) {\n    if (locked) {\n      return\n    }\n    const obj = columns.reduce((acc, col, index) => {\n      const row = args[index] || ''\n      return {\n        ...acc,\n        [col]: row\n      }\n    }, {})\n    table.push(obj)\n  }\n\n  function colSizes () {\n    return table.reduce(\n      (acc, row) => columns.map(\n        (col, index) => Math.max(row[col].length, acc[index])\n      ), columns.map(() => 0)\n    )\n  }\n\n  function padLeft (str, len) {\n    return str + ' '.repeat(len - str.length)\n  }\n\n  function padRight (str, len) {\n    return ' '.repeat(len - str.length) + str\n  }\n\n  function content () {\n    const sizes = colSizes()\n    function formatField (value, index) {\n      const size = sizes[index]\n      const align = alignment[index]\n      if (align === 'left') {\n        return padLeft(value, size)\n      }\n      if (align === 'right') {\n        return padRight(value, size)\n      }\n      return value\n    }\n    const output = table.reduce((acc, row) => {\n      const formattedRow = columns.reduce((acc, col, index) => ({\n        ...acc,\n        [col]: formatField(row[col], index)\n      }), {})\n      return [...acc, formattedRow]\n    }, [])\n    return output\n  }\n\n  return {\n    lock: lock,\n    addRow: addRow,\n    content: content\n  }\n}\n\nfunction TimeTaken () {\n  const startTime = Date.now()\n\n  function fmt (num, digits) {\n    return num.toFixed(digits).replace(/\\.0+$/, '')\n  }\n\n  return function () {\n    const duration = Date.now() - startTime\n\n    if (duration < 500) {\n      return `${fmt(duration)} ms`\n    } else if (duration < 5000) {\n      return `${fmt(duration / 1000, 2)} s `\n    } else if (duration < 60000) {\n      return `${fmt(duration / 1000, 1)} s `\n    } else {\n      return `${fmt(duration / 1000 / 60, 1)} m `\n    }\n  }\n}\n"],"names":["n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","isArray","obj","Array","isFunction","isString","isObject","isEventEmitter","addListener","removeListener","isPojo","Object","getPrototypeOf","prototype","isTemplateLiteral","every","uniq","input","reduce","acc","one","defer","fn","args","timer","setTimeout","clearTimeout","Defer","Once","Revokable","revoke","_fn","result","revoked","Pausables","startPaused","runFnWhenPaused","paused","Pausable","pause","resume","ReferenceCounter","name","kind","description","expecting","_refs","flat","ref","increase","countOf","decrease","count","Math","max","refs","table","keys","sort","key","toValue","typeErrorIfFnReturnsFalse","argName","argTypeFn","arg","undefined","typeErrorIfTypeOfFails","argType","typeErrorFromArgument","argMap","index","errorDesc","ArgTypeError","errPrefix","fnName","typeMap","signature","join","entries","err","filter","Boolean","length","Logger","level","c","console","_level","info","log","warn","none","canWarn","canLog","canInfo","error","rxCRLF","cxPipe","cxArrow","rxOperators","rxUnsafe","replace","rxLineContinuations","RegExp","rxDisallowedCharacters","rxComment","argTypeError","decomposeRoute","templateLiteral","TypeError","lines","condensedLines","linesOfTokens","tokenisedLines","route","decomposeChart","chart","linesOfRoutes","decomposeRouteFromTokens","linesOfTransitions","decomposeTransitionsFromRoute","emptyStateFound","routeKeys","includes","filteredRoutes","filteredStates","transitions","split","routes","states","linesFrom","strOrArr","line","output","previousLineHasContinuation","condenseLine","condensedLine","sanitisedLine","test","finalCondensedLine","str","previousStates","fromStates","toStates","fromState","toState","ON_EXITING","ON_ENTERING","ON_EXITED","ON_ENTERED","ON_SWITCHING","ON_SWITCHED","INTERNAL_EVENTS","Statebot","options","logPrefix","logLevel","historyLimit","events","wrapEmitter","mitt","startIn","Error","_console","stateHistory","stateHistoryLimit","internalEvents","transitionId","emitInternalEvent","eventName","onInternalEvent","cb","statesHandled","routesHandled","eventsHandled","applyHitcher","hitcher","hitcherActions","enter","Enter","Emit","decomposeHitcherActions","transitionsForEvents","transitionsOnly","allStates","allRoutes","allCleanupFns","decomposedEvents","transitionsAndAction","expandTransitions","configs","ifStateThenEnterState","action","inState","createEventHandlerForTransition","onEvent","eventWasHandled","config","some","transitionNoOp","transitionConfigs","runThenMethodOnTransition","invalidStates","state","invalidRoutes","previousState","currentState","canTransitionTo","testStates","nextStates","statesAvailableFromHere","_state","trim","anyOrFn","conditionMatches","fnArgs","nextRoute","shift","switchMethods","methodName","decreaseRefCount","removeEvent","enterExitMethods","names","switchMethod","toLowerCase","decreaseRefCounts","curriedArgs","InState","curriedFnArgs","concat","reset","message","lastState","prevRoute","availableStates","inspect","logRefCounterInfo","refCounter","__STATEBOT__","history","onEntered","onEntering","onExited","onExiting","onSwitched","onSwitching","onTransitions","performTransitions","routeChart","actionFnOrConfigObj","_on","_then","then","hasValidEventNames","eventNames","_configs","isStatebot","object","wrapMap","fnMeta","handleEvent","refCount","routeIsPossible","machine","_route","nextState","passes","assertionId","assertRoute","expectedRoute","run","permittedDeviations","timeoutInMs","prefix","fromStateActionFn","removeFromStateActionFn","totalTimeTaken","TimeTaken","stateTimeTaken","assertionTimeoutTimer","deviations","pending","unexpected","consumeRoute","report","Table","finaliseReport","addRow","lock","content","enteredState","expectedState","Promise","resolve","reject","clearTimeoutAndResolve","removeOnSwitchingListener","clearTimeoutAndReject","bailout","columns","alignments","alignment","_","locked","col","row","colSizes","padLeft","len","repeat","padRight","sizes","formatField","value","size","align","formattedRow","startTime","Date","now","fmt","num","digits","toFixed","duration"],"mappings":"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EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIhN,IAAAA,IAAI,EAAJA,IAjHK;;EAmHL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIsL,IAAAA,IAAI,EAAJA,IAnKK;;EAqKL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIF,IAAAA,KAAK,EAALA,KAtMK;;EAwML;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIC,IAAAA,KAAK,EAALA,KA3OK;;EA6OL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI6D,IAAAA,OAAO,EAAE;EAAA,uBAAU5E,YAAV;EAAA,KAvQJ;;EAyQL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI5E,IAAAA,IAAI,EAAE;EAAA,aAAMA,KAAI,EAAV;EAAA,KA5SD;;EA8SL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIoJ,IAAAA,OAAO,EAAE;EAAA,aAAMA,QAAO,EAAb;EAAA,KApUJ;;EAsUL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI3C,IAAAA,OAAO,EAAPA,OAtXK;;EAwXL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACImC,IAAAA,OAAO,EAAPA,OA5aK;;EA8aL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI1L,IAAAA,IAAI,EAAE;EAAA,aAAMA,KAAN;EAAA,KApcD;;EAscL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIuM,IAAAA,SAAS,EAAEnB,gBAAgB,CAACzE,UAAD,CAretB;;EAueL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI6F,IAAAA,UAAU,EAAEpB,gBAAgB,CAAC3E,WAAD,CA3gBvB;;EA6gBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIgD,IAAAA,OAAO,EAAPA,OA9jBK;;EAgkBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIgD,IAAAA,QAAQ,EAAErB,gBAAgB,CAAC1E,SAAD,CA9lBrB;;EAgmBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIgG,IAAAA,SAAS,EAAEtB,gBAAgB,CAAC5E,UAAD,CApoBtB;;EAsoBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACImG,IAAAA,UAAU,EAAE3B,aAAa,CAACnE,WAAD,CA9qBpB;;EAgrBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI+F,IAAAA,WAAW,EAAE5B,aAAa,CAACpE,YAAD,CA7sBrB;;EA+sBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIiG,IAAAA,aAAa,EAAE,uBAAAzH,WAAW;EAAA,aAAIiD,YAAY,CAACjD,WAAD,EAAc,eAAd,CAAhB;EAAA,KAvyBrB;;EAyyBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACIvF,IAAAA,KAAK,EAALA,KAjzBK;;EAmzBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACIF,IAAAA,MAAM,EAANA,MA3zBK;;EA6zBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACImN,IAAAA,kBAAkB,EAAE,4BAAA1H,WAAW;EAAA,aAAIiD,YAAY,CAACjD,WAAD,EAAc,oBAAd,CAAhB;EAAA,KA94B1B;;EAg5BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI+E,IAAAA,aAAa,EAAbA,aAt6BK;;EAw6BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI0B,IAAAA,KAAK,EAALA,KAl8BK;;EAo8BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACI/L,IAAAA,MAAM,EAANA,MA38BK;;EA68BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI0K,IAAAA,uBAAuB,EAAvBA;EAp+BK,GAAP;EAs+BD;;EAED,SAAS7B,uBAAT,CAAkCJ,cAAlC,EAAkD;EAEhD,MAAMK,oBAAoB,GAAG,EAA7B;EAGA,MAAMC,eAAe,GAAG,EAAxB;EAEA5K,EAAAA,MAAM,CACHmE,OADH,CACWmG,cADX,EAEGjL,GAFH,CAEO,iBAAuC;EAAA;EAAA,QAArCyP,UAAqC;EAAA,QAAzBC,mBAAyB;;EAC1C,QAAItP,UAAU,CAACsP,mBAAD,CAAd,EAAqC;EACnCnE,MAAAA,eAAe,CAAC9L,IAAhB,CAAqB;EAAEgQ,QAAAA,UAAU,EAAVA,UAAF;EAAczD,QAAAA,MAAM,EAAE0D;EAAtB,OAArB;EACA;EACD;;EACD,QAAI,CAAChP,MAAM,CAACgP,mBAAD,CAAX,EAAkC;EAChC;EACD;;EAPyC,QAS9BC,GAT8B,GASTD,mBATS,CASlCtQ,EATkC;EAAA,QASnBwQ,KATmB,GASTF,mBATS,CASzBG,IATyB;EAU1C,QAAMC,kBAAkB,GAAG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"}