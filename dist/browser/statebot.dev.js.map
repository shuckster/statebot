{"version":3,"file":"statebot.dev.js","sources":["../../node_modules/.pnpm/mitt@3.0.0/node_modules/mitt/dist/mitt.mjs","../../src/types.js","../../src/utils.js","../../src/parsing.js","../../src/statebot.js","../../src/assertions.js"],"sourcesContent":["export default function(n){return{all:n=n||new Map,on:function(t,e){var i=n.get(t);i?i.push(e):n.set(t,[e])},off:function(t,e){var i=n.get(t);i&&(e?i.splice(i.indexOf(e)>>>0,1):n.set(t,[]))},emit:function(t,e){var i=n.get(t);i&&i.slice().map(function(n){n(e)}),(i=n.get(\"*\"))&&i.slice().map(function(n){n(t,e)})}}}\n//# sourceMappingURL=mitt.mjs.map\n","\n//\n// RUNTIME TYPE CHECKING\n//\n\nexport {\n  isArray,\n  isEventEmitter,\n  isFunction,\n  isPojo,\n  isString,\n  isTemplateLiteral,\n  ArgTypeError,\n}\n\n//\n// isType\n//\n\nfunction isEventEmitter (obj) {\n  return (\n    isObject(obj) &&\n    isFunction(obj.emit) &&\n    (isFunction(obj.addListener) || isFunction(obj.on)) &&\n    (isFunction(obj.removeListener) || isFunction(obj.off))\n  )\n}\n\nfunction isArray (obj) {\n  return Array.isArray(obj)\n}\n\nfunction isFunction (obj) {\n  return typeof obj === 'function'\n}\n\nfunction isString (obj) {\n  return typeof obj === 'string'\n}\n\nfunction isObject (obj) {\n  return typeof obj === 'object'\n}\n\nfunction isPojo (obj) {\n  if (obj === null || (!isObject(obj))) {\n    return false\n  }\n  return Object.getPrototypeOf(obj) === Object.prototype\n}\n\nfunction isTemplateLiteral (obj) {\n  if (isString(obj)) {\n    return true\n  }\n  if (!isArray(obj)) {\n    return false\n  }\n  return obj.every(isString)\n}\n\n//\n// ArgTypeError\n//\n\nconst typeErrorStringIfFnReturnsFalse = (argName, argTypeFn, arg) => {\n  return argTypeFn(arg)\n    ? undefined\n    : `${argTypeFn.name}(${argName}) did not return true`\n}\n\nconst typeErrorStringIfTypeOfFails = (argName, argType, arg) => {\n  return typeof arg === argType\n    ? undefined\n    : `Argument \"${argName}\" should be a ${argType}`\n}\n\nconst typeErrorStringFromArgument = (argMap, arg, index) => {\n  const { argName, argType } = argMap[index]\n  if (arg === undefined) {\n    return `Argument undefined: \"${argName}\"`\n  }\n\n  const permittedArgTypes = Array.isArray(argType)\n    ? argType\n    : [argType]\n\n  const errorDescs = permittedArgTypes\n    .map(argType => isFunction(argType)\n      ? typeErrorStringIfFnReturnsFalse(argName, argType, arg)\n      : typeErrorStringIfTypeOfFails(argName, argType, arg)\n    )\n    .filter(isString)\n\n  const multipleTypesSpecified = permittedArgTypes.length > 1\n  const shouldError = multipleTypesSpecified\n    ? errorDescs.length > 1\n    : errorDescs.length\n\n  if (shouldError) {\n    return (\n      `${errorDescs.join('\\n| ')}\\n> typeof ${argName} === ${typeof arg}(${JSON.stringify(arg)})`\n    )\n  }\n}\n\n/**\n * Helper for enforcing correct argument-types.\n *\n * @private\n * @param {string} errPrefix\n *\n * @example\n * const argTypeError = ArgTypeError('namespace#')\n *\n * function myFn (myArg1, myArg2) {\n *   const err = argTypeError('myFn',\n *     { myArg1: isString, myArg2: Boolean },\n *     myArg1, myArg2\n *   )\n *   if (err) {\n *     throw new TypeError(err)\n *   }\n * }\n */\n\nfunction ArgTypeError (errPrefix) {\n  return function (fnName, typeMap, ...args) {\n    const argMap = Object\n      .entries(typeMap)\n      .map(([argName, argType]) => ({ argName, argType }))\n\n    const err = args\n      .map((...args) => typeErrorStringFromArgument(argMap, ...args))\n      .filter(isString)\n\n    if (!err.length) {\n      return\n    }\n\n    const signature = Object.keys(typeMap).join(', ')\n    return (\n      `\\n${errPrefix || ''}${fnName}(${signature}):\\n` +\n      `${err.map(err => `| ${err}`).join('\\n')}`\n    )\n  }\n}\n","\n//\n// STATEBOT UTILS\n//\n\nexport {\n  Defer,\n  Logger,\n  Once,\n  Pausables,\n  ReferenceCounter,\n  Revokable,\n  uniq,\n  wrapEmitter,\n}\n\nimport { isString } from './types'\n\nfunction wrapEmitter (events) {\n  const emit = (eventName, ...args) =>\n    events.emit(eventName, args)\n\n  const addListener = events.addListener\n    ? (...args) => events.addListener(...args)\n    : (...args) => events.on(...args)\n\n  const removeListener = events.removeListener\n    ? (...args) => events.removeListener(...args)\n    : (...args) => events.off(...args)\n\n  const wrapMap = new Map()\n\n  function on (eventName, fn) {\n    let fnMeta = wrapMap.get(fn)\n    if (!fnMeta) {\n      fnMeta = {\n        handleEvent: (args = []) => fn(...[args].flat()),\n        refCount: 0\n      }\n      wrapMap.set(fn, fnMeta)\n    }\n\n    fnMeta.refCount += 1\n    addListener(eventName, fnMeta.handleEvent)\n  }\n\n  function off (eventName, fn) {\n    let fnMeta = wrapMap.get(fn)\n    if (!fnMeta) {\n      return\n    }\n\n    removeListener(eventName, fnMeta.handleEvent)\n    fnMeta.refCount -= 1\n    if (fnMeta.refCount === 0) {\n      wrapMap.delete(fn)\n    }\n  }\n\n  return {\n    emit,\n    on,\n    off\n  }\n}\n\n//\n// uniq\n//\n\nfunction uniq (input) {\n  return input.reduce((acc, one) =>\n    acc.indexOf(one) === -1\n      ? [...acc, one]\n      : acc\n    , []\n  )\n}\n\n//\n// defer\n//\n\nfunction defer (fn, ...args) {\n  const timer = setTimeout(fn, 0, ...args)\n  return () => { clearTimeout(timer) }\n}\n\nfunction Defer (fn) {\n  return (...args) => defer(fn, ...args)\n}\n\n//\n// Revokable\n//\n\nfunction Once (fn) {\n  const { revoke, fn: _fn } = Revokable(fn)\n  let result\n  return function (...args) {\n    result = _fn(...args)\n    revoke()\n    return result\n  }\n}\n\nfunction Revokable (fn) {\n  let revoked = false\n  let result\n  return {\n    fn: (...args) => {\n      if (!revoked) {\n        result = fn(...args)\n      }\n      return result\n    },\n    revoke: () => {\n      revoked = true\n    }\n  }\n}\n\n//\n// Pausables\n//\n\nfunction Pausables (startPaused, runFnWhenPaused) {\n  runFnWhenPaused = runFnWhenPaused || function () {}\n  let paused = !!startPaused\n\n  function Pausable (fn) {\n    return (...args) => {\n      if (paused) {\n        runFnWhenPaused()\n        return false\n      }\n      return fn(...args)\n    }\n  }\n\n  return {\n    Pausable,\n    paused: () => paused,\n    pause: () => { paused = true },\n    resume: () => { paused = false },\n  }\n}\n\n//\n// ReferenceCounter\n//\n\nfunction ReferenceCounter (name, kind, description, ...expecting) {\n  const _refs = [...expecting]\n    .flat()\n    .reduce((acc, ref) => ({ ...acc, [ref]: 0 }), {})\n\n  function increase (ref) {\n    _refs[ref] = countOf(ref) + 1\n    return () => { decrease(ref) }\n  }\n  function decrease (ref) {\n    const count = countOf(ref) - 1\n    _refs[ref] = Math.max(count, 0)\n  }\n  function countOf (ref) {\n    return _refs[ref] || 0\n  }\n  function refs () {\n    return { ..._refs }\n  }\n  function table () {\n    return Object.keys(_refs).sort()\n      .map(key => [key, _refs[key]])\n      .map(([ref, count]) => {\n        return {\n          [kind]: ref,\n          refs: count || 'None'\n        }\n      })\n  }\n  function toValue () {\n    return {\n      description: `Statebot[${name}]: ${description}:`,\n      table: table()\n    }\n  }\n  return {\n    increase,\n    decrease,\n    countOf,\n    toValue,\n    refs\n  }\n}\n\n//\n// Logger\n//\n\nfunction Logger (level, _console) {\n  if (isString(level)) {\n    level = ({\n      info: 3,\n      log: 2,\n      warn: 1,\n      none: 0\n    })[level] || 3\n  }\n  function canWarn () {\n    return level >= 1\n  }\n  function canLog () {\n    return level >= 2\n  }\n  function canInfo () {\n    return level >= 3\n  }\n  const { info, table, log, warn, error } = _console || console\n  return {\n    canWarn,\n    canLog,\n    canInfo,\n\n    info: (...args) => { canInfo() && info(...args) },\n    table: (...args) => { canLog() && table(...args) },\n    log: (...args) => { canLog() && log(...args) },\n    warn: (...args) => { canWarn() && warn(...args) },\n    error: (...args) => { error(...args) }\n  }\n}\n","\n//\n// STATEBOT CHART/ROUTE PARSING\n//\n\nconst rxCRLF = /[\\r\\n]/\nconst cxPipe = '|'\nconst cxArrow = '->'\nconst rxOperators = [cxPipe, cxArrow]\n  .map(rxUnsafe => rxUnsafe.replace('|', '\\\\|'))\n  .join('|')\n\nconst rxLineContinuations = new RegExp(`(${rxOperators})$`)\nconst rxDisallowedCharacters = /[^a-z0-9!@#$%^&*:_+=<>|~.\\x2D]/gi\nconst rxComment = /(\\/\\/[^\\n\\r]*)/\n\nexport {\n  cxPipe,\n  cxArrow,\n  rxDisallowedCharacters,\n  decomposeChart,\n  decomposeRoute\n}\n\nimport { uniq } from './utils'\nimport { isTemplateLiteral, ArgTypeError } from './types'\n\nconst argTypeError = ArgTypeError('statebot.')\n\nfunction decomposeRoute (templateLiteral) {\n  const err = argTypeError('decomposeRoute',\n    { templateLiteral: isTemplateLiteral },\n    templateLiteral\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const lines = condensedLines(templateLiteral)\n  const linesOfTokens = tokenisedLines(lines)\n  const route = linesOfTokens.flat(2)\n\n  return route\n}\n\n/**\n * Decompose a {@link statebotChart} into an object of `states`, `routes`,\n * and `transitions`.\n *\n * Statebot() uses this internally to parse charts. Exposed for debugging.\n *\n * @memberof statebot\n * @function\n * @param {statebotChart} chart\n * @returns {Object}\n *\n * @example\n * var { states, routes, transitions } = decomposeChart`\n *   pending ->\n *     success | failure\n * `\n * // states = ['pending', 'success', 'failure']\n * // routes = [ 'pending->success', 'pending->failure']\n * // transitions = [\n * //   ['pending', 'success'],\n * //   ['pending', 'failure']\n * // ]\n */\n\nfunction decomposeChart (chart) {\n  const err = argTypeError('decomposeChart',\n    { chart: isTemplateLiteral },\n    chart\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const lines = condensedLines(chart)\n  const linesOfTokens = tokenisedLines(lines)\n  const linesOfRoutes = linesOfTokens\n    .flatMap(decomposeRouteFromTokens)\n\n  const linesOfTransitions = linesOfRoutes\n    .flatMap(decomposeTransitionsFromRoute)\n\n  let emptyStateFound = false\n  const routeKeys = linesOfTransitions.map(route => {\n    if (route.includes('')) {\n      emptyStateFound = true\n    }\n    return route.join(cxArrow)\n  })\n\n  const filteredRoutes = uniq(routeKeys)\n  const filteredStates = uniq(linesOfTokens.flat(3))\n\n  return {\n    transitions: filteredRoutes.map(route => route.split(cxArrow)),\n    routes: filteredRoutes,\n    states: !emptyStateFound\n      ? filteredStates.filter(Boolean)\n      : filteredStates\n  }\n}\n\nfunction linesFrom (strOrArr) {\n  return [strOrArr]\n    .flat()\n    .reduce((acc, line) => [...acc, ...line.split(rxCRLF)], [])\n}\n\nfunction condensedLines (strOrArr) {\n  const input = linesFrom(strOrArr)\n  const output = []\n\n  let previousLineHasContinuation = false\n\n  const condenseLine = (condensedLine, line) => {\n    const sanitisedLine = line\n      .replace(rxComment, '')\n      .replace(rxDisallowedCharacters, '')\n\n    if (!sanitisedLine) {\n      return condensedLine\n    }\n\n    previousLineHasContinuation = rxLineContinuations\n      .test(sanitisedLine)\n\n    if (previousLineHasContinuation) {\n      return condensedLine + sanitisedLine\n    }\n\n    output.push(condensedLine + sanitisedLine)\n    return ''\n  }\n\n  const finalCondensedLine = input\n    .reduce(condenseLine, '')\n\n  if (previousLineHasContinuation || finalCondensedLine) {\n    return [...output, finalCondensedLine]\n  }\n\n  return [...output]\n}\n\nfunction tokenisedLines (lines) {\n  return lines\n    .map(line => line\n      .split(cxArrow)\n      .map(str => str.split(cxPipe))\n    )\n}\n\nfunction decomposeRouteFromTokens (line) {\n  const output = []\n\n  line.reduce((previousStates, states) => {\n    if (previousStates === false) {\n      return [...states]\n    }\n\n    output.push([previousStates, [...states]])\n    return [...states]\n  }, false)\n\n  return output\n}\n\nfunction decomposeTransitionsFromRoute ([fromStates, toStates]) {\n  return fromStates.reduce((acc, fromState) => [\n    ...acc,\n    ...toStates.map(toState => [fromState, toState])\n  ], [])\n}\n","\n//\n// STATEBOT FSM\n//\n\nexport {\n  Statebot,\n  isStatebot\n}\n\n/**\n * Options for creating a Statebot.\n *\n * @typedef {Object} statebotOptions\n * @property {statebotChart} chart\n *  The state-chart.\n * @property {string} [startIn=auto]\n *  The state in which to start. If unspecified, the first state in the\n *  chart will be used.\n * @property {number} [logLevel=3]\n *  How noisy the logging is, from 1 to 3:\n *  ```\n *  1) console.warn\n *  2) console.warn/log/table\n *  3) console.warn/log/table/info\n *  ```\n *  `3` is the default. Argument type-errors will always `throw`.\n * @property {number} [historyLimit=2]\n *  Limit how much history the state-machine keeps. Accessed via\n *  {@link #statebotfsmhistory|statebotFsm#history()}.\n * @property {events} [events]\n *  If you wish to have your Statebots listen to events coming from\n *  a shared EventEmitter, you can pass it in here. The `emit()`/`onEvent()`/\n *  `performTransitions()` methods will use it.\n *\n *  It should have the same signature as {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}.\n *\n *  - Since Statebot 2.5.0 {@link https://npmjs.com/mitt|mitt} is also compatible.\n *  - Since Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is used internally.\n */\n\n/**\n * A description of all the states in a machine, plus all of the\n * permitted transitions between them.\n *\n * This is defined using a `string` or an `array` of strings, but\n *  {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals|Template Literals}\n * are much more convenient.\n *\n * An arrow `->` configures a **permitted transition** between two states:\n *\n * ```\n * from-state -> to-state\n * ```\n *\n * It's the only operator needed to build any chart:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved\n *   pending -> rejected\n *   resolved -> done\n *   rejected -> done\n * `\n * ```\n *\n * The \"OR\" operator `|` can help us remove some redundancy from the above example:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved | rejected\n *   resolved | rejected -> done\n * `\n * ```\n *\n * In both charts, `pending` can transition to `resolved` or `rejected`, and\n * `resolved` or `rejected` can both transition to `done`.\n *\n * We can streamline this even further:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> (resolved | rejected) -> done\n * `\n * ```\n *\n * Again, this is exactly equivalent to the previous two examples.\n *\n * Notice in this one that we have parentheses `(` `)` surrounding `resolved`\n * and `rejected`. They are actually completely ignored by the parser, and\n * you can use them as you please to help make your charts more readable.\n *\n * A chart works exactly the same without them:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> resolved | rejected -> done\n * `\n * ```\n *\n * Charts can also be split across multiple-lines:\n *\n * ```js\n * var promiseLikeChart = `\n *   pending ->\n *   resolved |\n *   rejected ->\n *   done\n * `\n * ```\n * Notice that all white-space is ignored on either side of the `->`\n * and `|`.\n *\n * `// Comments of this kind are allowed, too:`\n *\n * ```js\n * var promiseLikeChart = `\n *   pending -> // Where do we go from here?\n *     (resolved | rejected) -> // Ah, yes\n *\n *   // And now we're all finished\n *   done\n * `\n * ```\n *\n * Finally, here's a more full example:\n *\n * ```js\n * var dragDropChart = `\n *   idle ->\n *     drag-detect ->\n *       (dragging | clicked)\n *\n *   // Just a click, bail-out!\n *   clicked -> idle\n *\n *   // Drag detected!\n *   dragging ->\n *     drag-wait -> dragged -> drag-wait\n *\n *   // Drag finished...\n *   (drag-wait | dragged) ->\n *     (drag-done | drag-cancel) ->\n *       idle\n * `\n * ```\n *\n * @typedef {string|string[]} statebotChart\n */\n\nconst ON_EXITING = 'onExiting'\nconst ON_ENTERING = 'onEntering'\nconst ON_EXITED = 'onExited'\nconst ON_ENTERED = 'onEntered'\nconst ON_SWITCHING = 'onSwitching'\nconst ON_SWITCHED = 'onSwitched'\n\nconst INTERNAL_EVENTS = {\n  [ON_SWITCHING]: '(ANY)state:changing',\n  [ON_SWITCHED]: '(ANY)state:changed'\n}\n\nimport mitt from 'mitt'\n\nimport {\n  wrapEmitter,\n  Logger,\n  ReferenceCounter,\n  Pausables,\n  Once,\n} from './utils'\n\nimport {\n  isArray,\n  isEventEmitter,\n  isFunction,\n  isPojo,\n  isString,\n  ArgTypeError,\n} from './types'\n\nimport { decomposeChart, cxArrow } from './parsing'\n\n/**\n * Create a {@link #statebotfsm|statebotFsm} `object`.\n *\n * @memberof statebot\n * @function\n * @example\n * var machine = Statebot('lemming', {\n *   chart: `\n *     walking -> (digging | building | falling) ->\n *       walking\n *\n *     falling -> splatting\n *     walking -> exiting\n *   `\n * })\n *\n * @param {string} name\n *  Give your Statebot a name. Used for logging and by {@link #statebotassertroute|assertRoute()}.\n * @param {statebotOptions} options\n */\n\nfunction Statebot (name, options) {\n  if (!isString(name)) {\n    throw new TypeError('\\nStatebot: Please specify a name for this machine')\n  }\n\n  const logPrefix = `Statebot[${name}]`\n  if (!isPojo(options)) {\n    throw new TypeError(`\\n${logPrefix}: Please specify options for this machine`)\n  }\n\n  const {\n    chart = undefined,\n    logLevel = 3,\n    historyLimit = 2\n  } = options || {}\n\n  const events = options.events === undefined\n    ? wrapEmitter(mitt())\n    : isEventEmitter(options.events) && wrapEmitter(options.events)\n\n  if (!events) {\n    throw new TypeError(`\\n${logPrefix}: Invalid event-emitter specified in options`)\n  }\n\n  const { states = [], routes = [] } = chart\n    ? decomposeChart(chart)\n    : options\n\n  const { startIn = states[0] } = options\n\n  if (!states.includes(startIn)) {\n    throw new Error(`${logPrefix}: Starting-state not in chart: \"${startIn}\"`)\n  }\n\n  const argTypeError = ArgTypeError(`${logPrefix}#`)\n  const _console = Logger(logLevel, console)\n  const { canWarn } = _console\n\n  const stateHistory = [startIn]\n  const stateHistoryLimit = Math.max(historyLimit, 2)\n\n  let transitionId = 0\n\n  const { pause, resume, paused, Pausable } = Pausables(false, () =>\n    _console.warn(`${logPrefix}: Ignoring callback, paused`)\n  )\n\n  const internalEvents = wrapEmitter(mitt())\n  const emitInternalEvent = Pausable(internalEvents.emit)\n\n  function onInternalEvent (eventName, cb) {\n    internalEvents.on(eventName, cb)\n    return () => internalEvents.off(eventName, cb)\n  }\n\n  const statesHandled = ReferenceCounter(\n    name,\n    'states',\n    'Listening for the following state-changes',\n    [...states]\n  )\n  const routesHandled = ReferenceCounter(\n    name,\n    'transitions',\n    'Listening for the following transitions',\n    [...routes]\n  )\n  const eventsHandled = ReferenceCounter(\n    name,\n    'events',\n    'Listening for the following events'\n  )\n\n  // Interprets onTransitions() and performTransitions()\n  function applyHitcher (hitcher, fnName) {\n    const hitcherActions =\n      isFunction(hitcher)\n        ? hitcher({ enter, emit, Enter, Emit })\n        : isPojo(hitcher) ? hitcher : null\n\n    if (!isPojo(hitcherActions)) {\n      throw new TypeError(\n        `Statebot[${name}]#${fnName}(): Expected an object, or a function that returns an object`\n      )\n    }\n\n    const allStates = []\n    const allRoutes = []\n    const {\n      transitionsForEvents,\n      transitionsOnly\n    } = decomposeHitcherActions(hitcherActions)\n\n    // Handle performTransitions() signature\n    // (configs with an event, and maybe a then-method too)\n    const eventsMappedToTransitionConfigs = Object\n      .entries(transitionsForEvents)\n      .reduce(decomposeTransitionsForEvent, {})\n\n    // Handle onTransitions() signature\n    // (transition-only, and maybe a then-function too)\n    const transitionConfigs = expandTransitions(transitionsOnly, canWarn)\n\n    // Now install handlers for on/performTransitions:\n    const allCleanupFns =\n      Object\n        .entries(eventsMappedToTransitionConfigs)\n        .map(createEventHandlerForTransition)\n        .concat(transitionConfigs.configs.map(runThenMethodOnTransition))\n        .flat()\n\n    // Debugging\n    // (if we're at the right level)\n    if (canWarn()) {\n      allStates.push(...transitionConfigs.states)\n      allRoutes.push(...transitionConfigs.routes)\n\n      const invalidStates = allStates.filter(state => !states.includes(state))\n      const invalidRoutes = allRoutes.filter(route => !routes.includes(route))\n\n      if (invalidStates.length) {\n        _console.warn(\n          `Statebot[${name}]#${fnName}(): Invalid states specified:\\n` +\n          invalidStates.map(state => `  > \"${state}\"`).join('\\n')\n        )\n      }\n      if (invalidRoutes.length) {\n        _console.warn(\n          `Statebot[${name}]#${fnName}(): Invalid transitions specified:\\n` +\n          invalidRoutes.map(route => `  > \"${route}\"`).join('\\n')\n        )\n      }\n    }\n\n    return () => allCleanupFns.map(fn => fn())\n\n    // Helper for onTransitions()\n    function runThenMethodOnTransition (config) {\n      const { fromState, toState, action } = config\n      const route = `${fromState}->${toState}`\n      return [\n        routesHandled.increase(route),\n        onInternalEvent(route, bindActionTo(toState, action))\n      ]\n    }\n\n    // Helpers for performTransitions()\n    function decomposeTransitionsForEvent (acc, [eventName, transitionsAndAction]) {\n      const {\n        states,\n        routes,\n        configs\n      } = expandTransitions(transitionsAndAction, canWarn)\n\n      if (canWarn()) {\n        allStates.push(...states)\n        allRoutes.push(...routes)\n      }\n\n      return {\n        ...acc,\n        [eventName]: configs\n      }\n    }\n\n    function ifStateThenEnterState ({ fromState, toState, action, args }) {\n      return inState(fromState, () => {\n        enter(toState, ...args)\n        isFunction(action) && runActionFor(toState, action, ...args)\n        return true\n      })\n    }\n\n    function createEventHandlerForTransition ([eventName, configs]) {\n      return [\n        eventsHandled.increase(eventName),\n        onEvent(eventName, (...args) => {\n          const eventWasHandled = configs\n            .map(config => ({ ...config, args }))\n            .some(ifStateThenEnterState)\n\n          if (!eventWasHandled) {\n            transitionNoOp(`Event not handled: \"${eventName}\"`)\n          }\n        })\n      ]\n    }\n\n    function runActionFor(state, actionFn, ...args) {\n      const onExitingState = actionFn(...args)\n      if (isFunction(onExitingState)) {\n        const uninstall = Once(enterExitMethods[ON_EXITING](state, (toState) => {\n          uninstall()\n          onExitingState(toState)\n        }))\n\n        allCleanupFns.push(uninstall)\n      }\n    }\n\n    function bindActionTo(state, actionFn) {\n      return (...args) => runActionFor(state, actionFn, ...args)\n    }\n  }\n\n  function previousState () {\n    return stateHistory[stateHistory.length - 2]\n  }\n\n  function currentState () {\n    return stateHistory[stateHistory.length - 1]\n  }\n\n  function canTransitionTo (...states) {\n    const testStates = states.flat()\n    const err = argTypeError('canTransitionTo', { state: isString }, testStates[0])\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    if (!testStates.length) {\n      return false\n    }\n\n    const nextStates = statesAvailableFromHere()\n    return testStates.every(state => nextStates.includes(state))\n  }\n\n  function statesAvailableFromHere (state) {\n    const _state = state !== undefined\n      ? state\n      : currentState()\n\n    const err = argTypeError('statesAvailableFromHere', { state: isString }, _state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return routes.reduce((acc, route) => {\n      const [fromState, toState] = route\n        .split(cxArrow)\n        .map(state => state.trim())\n\n      return (fromState === _state)\n        ? [...acc, toState]\n        : acc\n    }, [])\n  }\n\n  function _inState (state, anyOrFn, ...fnArgs) {\n    const conditionMatches = currentState() === state\n\n    if (anyOrFn === undefined) {\n      return conditionMatches\n    }\n    if (!conditionMatches) {\n      return null\n    }\n    if (isFunction(anyOrFn)) {\n      return anyOrFn(...fnArgs)\n    }\n\n    return anyOrFn\n  }\n\n  function _inStateObject(stateObject, ...fnArgs) {\n    const match = Object\n      .entries(stateObject)\n      .find(([state]) => _inState(state))\n\n    return match\n      ? _inState(...match.concat(fnArgs))\n      : null\n  }\n\n  function inState (...args) {\n    const err = argTypeError('inState', { state: [isString, isPojo] }, args[0])\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return isPojo(args[0])\n      ? _inStateObject(...args)\n      : _inState(...args)\n  }\n\n  const emit = Pausable((eventName, ...args) => {\n    const err = argTypeError('emit', { eventName: isString }, eventName)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return events.emit(eventName, ...args)\n  })\n\n  const enter = Pausable((state, ...args) => {\n    const err = argTypeError('enter', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    const inState = currentState()\n    const toState = state\n\n    if (toState === inState) {\n      transitionNoOp(`Already in state: \"${toState}\"`)\n      return false\n    }\n\n    if (!states.includes(toState)) {\n      transitionNoOp(`Invalid state \"${toState}\", not switching`)\n      return false\n    }\n\n    const nextRoute = `${inState}->${toState}`\n    if (!routes.includes(nextRoute)) {\n      transitionNoOp(`Invalid transition \"${nextRoute}\", not switching`)\n      return false\n    }\n\n    // Fell-through, can enter next state\n    _console.info(`${logPrefix}: tId<${++transitionId}>: ${nextRoute}`)\n\n    stateHistory.push(toState)\n    if (stateHistory.length > stateHistoryLimit) {\n      stateHistory.shift()\n    }\n\n    emitInternalEvent(INTERNAL_EVENTS[ON_SWITCHING], toState, inState, ...args)\n    emitInternalEvent(nextRoute, ...args)\n    emitInternalEvent(INTERNAL_EVENTS[ON_SWITCHED], toState, inState, ...args)\n\n    return true\n  })\n\n  function onEvent (eventName, cb) {\n    const err = argTypeError('onEvent',\n      { eventName: isString, cb: isFunction },\n      eventName, cb\n    )\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    events.on(eventName, cb)\n    return () => events.off(eventName, cb)\n  }\n\n  const switchMethods = Object\n    .keys(INTERNAL_EVENTS)\n    .reduce((obj, methodName) => ({\n      ...obj,\n      [methodName]: cb => {\n        const err = argTypeError(methodName, { cb: isFunction }, cb)\n        if (err) {\n          throw new TypeError(err)\n        }\n\n        const decreaseRefCount = statesHandled.increase(\n          INTERNAL_EVENTS[methodName]\n        )\n        const removeEvent = onInternalEvent(\n          INTERNAL_EVENTS[methodName], cb\n        )\n\n        return () => {\n          removeEvent()\n          decreaseRefCount()\n        }\n      }\n    }), {})\n\n  const enterExitMethods = [\n    [ON_EXITING, ON_SWITCHING],\n    [ON_ENTERING, ON_SWITCHING],\n    [ON_EXITED, ON_SWITCHED],\n    [ON_ENTERED, ON_SWITCHED]\n  ]\n    .reduce((obj, names) => {\n      const [methodName, switchMethod] = names\n      const name = methodName.slice(2)\n      const eventName = name.toLowerCase()\n\n      return {\n        ...obj,\n        [methodName]: (state, cb) => {\n          const err = argTypeError(methodName,\n            { state: isString, cb: isFunction },\n            state, cb\n          )\n          if (err) {\n            throw new TypeError(err)\n          }\n\n          const decreaseRefCounts = [\n            statesHandled.increase(state),\n            statesHandled.increase(`${state}:${eventName}`)\n          ]\n\n          const removeEvent = switchMethods[switchMethod](\n            (toState, fromState, ...args) => {\n              if (name.indexOf('Exit') === 0) {\n                state === fromState && cb(toState, ...args)\n              } else {\n                state === toState && cb(fromState, ...args)\n              }\n            }\n          )\n\n          return () => {\n            removeEvent()\n            decreaseRefCounts.map(fn => fn())\n          }\n        }\n      }\n    }, {})\n\n  function Emit (eventName, ...curriedArgs) {\n    const err = argTypeError('Emit', { eventName: isString }, eventName)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return (...args) => emit(eventName, ...[...curriedArgs, ...args])\n  }\n\n  function Enter (state, ...curriedArgs) {\n    const err = argTypeError('Enter', { state: isString }, state)\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return (...args) => enter(state, ...[...curriedArgs, ...args])\n  }\n\n  function _InState (state, anyOrFn, ...curriedFnArgs) {\n    return (...fnArgs) =>\n      inState(state, anyOrFn, ...[...curriedFnArgs, ...fnArgs])\n  }\n\n  function _InStateObject(stateObject, ...curriedFnArgs) {\n    return (...fnArgs) =>\n      inState(stateObject, ...[...curriedFnArgs, ...fnArgs])\n  }\n\n  function InState (...args) {\n    const err = argTypeError('InState', { state: [isString, isPojo] }, args[0])\n    if (err) {\n      throw new TypeError(err)\n    }\n\n    return isPojo(args[0])\n      ? _InStateObject(...args)\n      : _InState(...args)\n  }\n\n  function reset () {\n    _console.warn(`${logPrefix}: State-machine reset!`)\n\n    stateHistory.length = 0\n    stateHistory.push(startIn)\n  }\n\n  function transitionNoOp (message) {\n    const lastState = previousState()\n    const inState = currentState()\n    const prevRoute =\n      `${lastState === undefined ? '[undefined]' : lastState}->${inState}`\n\n    const availableStates = statesAvailableFromHere()\n    if (!availableStates.length) {\n      _console.info(\n        `${logPrefix}: ${message}\\n` +\n          `  > Previous transition: \"${prevRoute}\"\\n` +\n          `  > There are no states available from \"${inState}\"`\n      )\n    } else {\n      _console.info(\n        `${logPrefix}: ${message}\\n` +\n          `  > Previous transition: \"${prevRoute}\"\\n` +\n          `  > From \"${inState}\", valid states are: [${availableStates\n            .map(state => `\"${state}\"`)\n            .join(', ')}]`\n      )\n    }\n  }\n\n  function inspect () {\n    return {\n      states: statesHandled.refs(),\n      transitions: routesHandled.refs(),\n      events: eventsHandled.refs()\n    }\n  }\n\n  function info () {\n    _console.log(`${logPrefix}: Information about this state-machine`)\n\n    logRefCounterInfo(statesHandled)\n    logRefCounterInfo(routesHandled)\n    logRefCounterInfo(eventsHandled)\n  }\n\n  function logRefCounterInfo (refCounter) {\n    const { description, table } = refCounter.toValue()\n    _console.log(description)\n    if (table.length) {\n      _console.table(table)\n    } else {\n      _console.log('  > No information')\n    }\n  }\n\n  /**\n   * A state-machine object created by\n   * {@link #statebotstatebot|Statebot()}.\n   * @typedef {Object} statebotFsm\n   */\n\n  return {\n    /**\n     * For identifying Statebot objects.\n     *\n     * @private\n     */\n    __STATEBOT__: 1,\n\n    /**\n     * Tests to see if we can transition to the specified state from\n     * the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * If more than one state is specified, `true` is returned only if\n     * **ALL** states are available.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string|string[]} states\n     * @returns {boolean}\n     * @example\n     * var machine = Statebot('game-menus', {\n     *   chart: `\n     *     loading ->\n     *       menu ->\n     *            play |\n     *         options |\n     *           sound |\n     *            quit\n     *\n     *     // Go back to menu\n     *     play | options | sound -> menu\n     *\n     *     // Can quit from main game, too\n     *     play -> quit\n     *   `\n     * })\n     *\n     * machine.canTransitionTo('play')\n     * // false\n     *\n     * machine.enter('menu')\n     * machine.canTransitionTo(['play', 'options'])\n     * // true\n     */\n    canTransitionTo,\n\n    /**\n     * Returns the current state.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string}\n     *\n     * @example\n     * var machine = Statebot('coroutine', {\n     *   chart: `\n     *     suspended -> running -> (suspended | dead)\n     *   `\n     * })\n     *\n     * machine.currentState()\n     * // \"suspended\"\n     */\n    currentState,\n\n    /**\n     * Immediately emits an event, firing any listeners added using\n     * {@link #statebotfsmperformtransitions|.performTransitions()} or {@link #statebotfsmonevent|.onEvent()}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} eventName\n     * @param {...*} [args]\n     *  Optional arguments to pass to listeners.\n     * @returns {boolean}\n     *  Whether or not the event had listeners.\n     *\n     *  See: {@link https://nodejs.org/api/events.html#events_emitter_emit_eventname_args|Node Events}\n     *  for more information.\n     *\n     * Statebot imports `EventEmitter` from the\n     *  {@link https://www.npmjs.com/package/events|events}\n     * package for dealing with events in the browser.\n     *\n     * Since Statebot 2.6.0 {@link https://npmjs.com/mitt|mitt} is\n     * used for both the browser and non-browser builds.\n     *\n     * @example\n     * var machine = Statebot('basic-form', {\n     *   chart: `\n     *     idle -> sending -> redirect\n     *   `\n     * })\n     *\n     * machine.performTransitions({\n     *   'idle -> sending': {\n     *     on: 'post-data',\n     *     then: (...args) => {\n     *       console.log('Event args: ', args)\n     *       // setTimeout(machine.Enter('redirect'), 5000)\n     *     }\n     *   }\n     * })\n     *\n     * machine.emit('post-data', 'Hello, world!')\n     * // Event args: [\"Hello, world!\"]\n     *\n     * machine.currentState()\n     * // \"sending\"\n     */\n    emit,\n\n    /**\n     * Creates a function that emits the specified event.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsmemit|.emit()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} eventName\n     *  The desired event to {@link #statebotfsmemit|.emit()}.\n     * @param {...*} [curriedArgs]\n     *  Arguments that will curry into the returned `emit()` function\n     *  whenever it is called.\n     * @returns {function} A function that emits that event.\n     *\n     * @example\n     * var machine = Statebot('traffic-lights', {\n     *   chart: `\n     *     go ->\n     *       prepare-to-stop ->\n     *       stop\n     *\n     *     // ...gotta keep that traffic flowing\n     *     stop ->\n     *       prepare-to-go ->\n     *       go\n     *   `,\n     *   startIn: 'stop'\n     * })\n     *\n     * machine.performTransitions({\n     *   'stop -> prepare-to-go':   { on: 'timer' },\n     *   'prepare-to-go -> go':     { on: 'timer' },\n     *   'go -> prepare-to-stop':   { on: 'timer' },\n     *   'prepare-to-stop -> stop': { on: 'timer' }\n     * })\n     *\n     * var nextTrafficLight = machine.Emit('timer')\n     * machine.currentState()\n     * // \"stop\"\n     *\n     * nextTrafficLight()\n     * nextTrafficLight()\n     * nextTrafficLight()\n     *\n     * machine.currentState()\n     * // \"prepare-to-stop\"\n     */\n    Emit,\n\n    /**\n     * Immediately changes to the specified state, so long as it is\n     * accessible from the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The desired state to switch-to.\n     * @param {...*} [args]\n     *  Optional arguments to pass to transition callbacks.\n     * @returns {boolean} Whether or not the state changed.\n     *\n     * @example\n     * var machine = Statebot('dialog', {\n     *   chart: `\n     *     idle -> showing-modal -> (saving | idle)\n     *       saving -> idle\n     *   `\n     * })\n     *\n     * machine.currentState()\n     * // \"idle\"\n     *\n     * machine.enter('saving')\n     * // false\n     *\n     * // [dialog]: Invalid transition \"idle->saving\", not switching\n     * // > Previous transition: \"[undefined]->idle\"\n     * // > From \"idle\", valid states are: [\"showing-modal\"]\n     *\n     * machine.enter('showing-modal')\n     * // true\n     */\n    enter,\n\n    /**\n     * Creates a function that changes to the specified state, so long\n     * as it is accessible from the {@link #statebotfsmcurrentstate|.currentState()}.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsmenter|.enter()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The desired state to switch-to.\n     * @param {...*} [curriedArgs]\n     *  Arguments that will curry into the returned `enter()` function\n     *  whenever it is called.\n     * @returns {function}\n     *  A function that can change the state when called.\n     *\n     * @example\n     * var machine = Statebot('popup-menu', {\n     *   chart: `\n     *     idle -> menu-opened ->\n     *       (item-clicked | idle)\n     *\n     *     item-clicked -> idle\n     *   `,\n     *   startIn: 'menu-opened'\n     * })\n     *\n     * button.onclick = machine.Enter('item-clicked')\n     * machine.currentState()\n     * // \"menu-opened\"\n     *\n     * button.onclick()\n     * machine.currentState()\n     * // \"item-clicked\"\n     */\n    Enter,\n\n    /**\n     * Returns all states the machine has been in so far, up to a limit set\n     * by `historyLimit` in {@link statebotOptions}.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string[]} A copy of the state-history.\n     *\n     * @example\n     * var machine = Statebot('downloader', {\n     *   chart: `\n     *     loading -> (failure | success)\n     *       failure -> loading\n     *       success -> done\n     *   `,\n     *   historyLimit: 4\n     * })\n     *\n     * machine.enter('failure')\n     * machine.enter('loading')\n     * machine.enter('success')\n     * machine.enter('done')\n     * machine.history()\n     * // [\"failure\", \"loading\", \"success\", \"done\"]\n     */\n    history: () => [...stateHistory],\n\n    /**\n     * Print information about the current machine to the console.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.info()\n     * // [half-duplex]: Information about this state-machine.\n     * // [half-duplex]: Listening for the following state-changes:\n     * // ┌─────────┬─────────────┬────────┐\n     * // │ (index) │   states    │   #    │\n     * // ├─────────┼─────────────┼────────┤\n     * // │    0    │   'done'    │ 'None' │\n     * // │    1    │   'idle'    │ 'None' │\n     * // │    2    │ 'receiving' │ 'None' │\n     * // │    3    │  'sending'  │ 'None' │\n     * // └─────────┴─────────────┴────────┘\n     * // [half-duplex] Listening for the following transitions:\n     * // ┌─────────┬───────────────────┬────────┐\n     * // │ (index) │    transitions    │   #    │\n     * // ├─────────┼───────────────────┼────────┤\n     * // │    0    │ 'idle->receiving' │ 'None' │\n     * // │    1    │  'idle->sending'  │ 'None' │\n     * // │    2    │ 'receiving->done' │ 'None' │\n     * // │    3    │  'sending->done'  │ 'None' │\n     * // └─────────┴───────────────────┴────────┘\n     * // [half-duplex]: Listening for the following events:\n     * // (No information)\n     */\n    info: () => info(),\n\n    /**\n     * Get information about the current machine.\n     *\n     * Same details as {@link #statebotfsminfo|.info()} in object-form.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @returns {object}\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.inspect()\n     * // Will return an object with the following signature:\n     * //  { states, transitions, events }\n     *\n     * // These will each have key-values, the key being the name\n     * // and the value being the number of listeners attached.\n     */\n    inspect: () => inspect(),\n\n    /**\n     * Checks if the {@link #statebotfsmcurrentstate|.currentState()}\n     * matches the specified `state`, immediately returning either\n     * `true` or `false`.\n     *\n     * If `outputWhenTrue` is specified, then it will be returned\n     * instead of `true`, and `null` will be returned instead of\n     *  `false`.\n     *\n     * If a function is specified, then its return-value will be used\n     * as the `true`-value.\n     *\n     * Since v2.7.0:\n     * - An object can be used instead of a string, with the keys\n     *   being the states, and the values corresponding to their\n     *   `outputWhenTrue` value. See the updated example below.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string|object} state\n     *  The state to test against. This can be a string if you have a\n     *  single condition, or an object for multiple. (See example.)\n     * @param {any|function} [outputWhenTrue]\n     *  When a string is specified as the first argment, this becomes\n     *  an optional `true`-value that is returned if the state matches.\n     *  If a function is specified, it will be called and its return\n     *  value will be used.\n     * @param {...*} [fnArgs]\n     *  Arguments that will pass into `outputWhenTrue()` if it has\n     *  been defined as a function.\n     * @returns {boolean|null|*}\n     *\n     * @example\n     * var machine = Statebot('little-revver', {\n     *   chart: `\n     *     idle ->\n     *       (gear-1 | gear-2 | reverse) ->\n     *     idle\n     *   `\n     * })\n     *\n     * machine.inState('idle')\n     * // true\n     *\n     * machine.inState('idle', 'Purrrr...')\n     * // \"Purrrr...\"\n     *\n     * machine.enter('gear-1')\n     *\n     * // Since v2.7.0:\n     * machine.inState({\n     *   'idle': 'Purrrr...',\n     *   'gear-1': () => 'Chugga-chugga-chugga...',\n     *   'gear-2': () => 'Brumma-brumma-brum-brum...',\n     *   'reverse': false,\n     * })\n     * // \"Chugga-chugga-chugga...\"\n     *\n     * machine.inState('idle', () => {\n     *   console.log('Idling!')\n     *   return 'Purrrr...'\n     * })\n     * // null\n     * // ^ the function is not called at all in the `false` case,\n     * //   so no console.log either.\n     */\n    inState,\n\n    /**\n     * Returns a function which, when run, tests that\n     * {@link #statebotfsmcurrentstate|.currentState()} matches the\n     * specified state, returning either `true` or `false`.\n     *\n     * If `outputWhenTrue` is specified, then it will be returned\n     * instead of `true`, and `null` will be returned instead of\n     *  `false`.\n     *\n     * (This is essentially a convenience wrapper around {@link #statebotfsminstate|.inState()}.)\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state to test against.\n     * @param {any|function} [outputWhenTrue]\n     *  Optional `true`-value. If a function is specified, it will be\n     *  called and its return value will be used.\n     * @param {...*} [curriedFnArgs]\n     *  Arguments that will curry into `outputWhenTrue()` if it has\n     *  been defined as a function.\n     * @returns {function}\n     *  A function that calls {@link #statebotfsminstate|.inState()}.\n     *\n     * @example\n     * var machine = Statebot('little-revver', {\n     *   chart: `\n     *     idle ->\n     *       (gear-1 | gear-2 | reverse) ->\n     *     idle\n     *   `\n     * })\n     *\n     * var idling = machine.InState('idle')\n     * var purring = machine.InState('idle', () => {\n     *   console.log('Idling!')\n     *   return 'Purrrr...'\n     * })\n     *\n     * idling()\n     * // true\n     *\n     * purring()\n     * // Idling!\n     * // \"Purrrr...\"\n     *\n     * machine.enter('gear-1')\n     * purring()\n     * // null\n     * // ^ the function is not called at all in the `false` case,\n     * //   so no console.log either.\n     */\n    InState,\n\n    /**\n     * Returns the name of the state-machine.\n     *\n     * Used for logging and also by {@link #statebotassertroute|assertRoute()}\n     * for the same.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string} The name of the state-machine.\n     *\n     * @example\n     * var machine = Statebot('Ay, there’s the rub.', {\n     *   chart: `\n     *     the-question -> (to-be | not-to-be)\n     *       not-to-be -> perchance-to-dream\n     *   `\n     * })\n     *\n     * machine.name()\n     * // \"Ay, there’s the rub.\"\n     */\n    name: () => name,\n\n    /**\n     * Adds a listener that runs a callback immediately **AFTER** the\n     * specified-state becomes the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {enterCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onEntered('done', fromState => {\n     *   console.log('Entered from:', fromState)\n     * })\n     *\n     * machine.enter('receiving')\n     * machine.enter('done')\n     * // Entered from: receiving\n     */\n    onEntered: enterExitMethods[ON_ENTERED],\n\n    /**\n     * Adds a listener that runs a callback immediately **BEFORE** the\n     * specified-state becomes the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {enterCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onEntered('done', () => {\n     *   console.log('We made it!')\n     * })\n     *\n     * machine.onEntering('done', fromState => {\n     *   console.log('Entering from:', fromState)\n     * })\n     *\n     * machine.enter('sending')\n     * machine.enter('done')\n     * // Entering from: sending\n     * // We made it!\n     */\n    onEntering: enterExitMethods[ON_ENTERING],\n\n    /**\n     * {@link #statebotfsmonentering .onEntering()} /\n     * {@link #statebotfsmonentered .onEntered()} callback signature.\n     *\n     * @callback enterCallback\n     * @param {string} fromState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Adds a listener that runs a callback immediately after the specified\n     * event is called.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} name The event name.\n     * @param {function} cb The callback.\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('traffic-lights', {\n     *   chart: `\n     *     go ->\n     *       prepare-to-stop ->\n     *       stop\n     *\n     *     // ...gotta keep that traffic flowing\n     *     stop ->\n     *       prepare-to-go ->\n     *       go\n     *   `\n     * })\n     *\n     * machine.performTransitions({\n     *   'stop -> prepare-to-go -> go':   { on: 'timer' },\n     *   'go -> prepare-to-stop -> stop': { on: 'timer' },\n     * })\n     *\n     * machine.onEvent('timer', () => {\n     *   redrawTrafficLights()\n     * })\n     *\n     * setInterval(machine.Emit('timer'), 2000)\n     */\n    onEvent,\n\n    /**\n     * Adds a listener that runs a callback immediately **AFTER** the\n     * specified-state is no longer the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {exitCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onExited('idle', toState => {\n     *   console.log('We are heading to:', toState)\n     * })\n     *\n     * machine.enter('sending')\n     * // We are heading to: sending\n     */\n    onExited: enterExitMethods[ON_EXITED],\n\n    /**\n     * Adds a listener that runs a callback immediately **BEFORE** the\n     * specified-state is no longer the current one.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} state The state.\n     * @param {exitCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onExited('idle', () => {\n     *   console.log('Peace out!')\n     * })\n     *\n     * machine.onExiting('idle', toState => {\n     *   console.log('Heading to:', toState)\n     * })\n     *\n     * machine.enter('receiving')\n     * machine.enter('done')\n     * // Heading to: receiving\n     * // Peace out!\n     */\n    onExiting: enterExitMethods[ON_EXITING],\n\n    /**\n     * {@link #statebotfsmonexiting .onExiting()} /\n     * {@link #statebotfsmonexited .onExited()} callback signature.\n     *\n     * @callback exitCallback\n     * @param {string} toState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Adds a listener that runs a callback immediately after **ANY**\n     * state-change.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {switchCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onSwitched((toState, fromState) => {\n     *   console.log(`We went from \"${fromState}\" to \"${toState}\"`)\n     * })\n     *\n     * machine.enter('receiving')\n     * // We went from \"idle\" to \"receiving\"\n     */\n    onSwitched: switchMethods[ON_SWITCHED],\n\n    /**\n     * Adds a listener that runs a callback immediately before **ANY**\n     * state-change.\n     *\n     * A function is returned that will remove the listener.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {switchCallback} cb\n     *  A callback function with the signature:\n     *\n     *  `(toState, fromState, ...args?)`\n     * @returns {function} A function that removes the listener.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onSwitching((toState, fromState) => {\n     *   console.log(`Going from \"${fromState}\" to \"${toState}\"`)\n     * })\n     *\n     * machine.enter('receiving')\n     * // Going from \"idle\" to \"receiving\"\n     */\n    onSwitching: switchMethods[ON_SWITCHING],\n\n    /**\n     * {@link #statebotfsmonswitching .onSwitching()} /\n     * {@link #statebotfsmonswitched .onSwitched()} callback signature.\n     *\n     * @callback switchCallback\n     * @param {string} toState\n     * @param {string} fromState\n     * @param {...any} [args]\n     *  Arguments passed-down from {@link #statebotfsmenter .enter()} or\n     *  {@link #statebotfsmemit .emit()}\n     */\n\n    /**\n     * Run callbacks when transitions happen.\n     *\n     * Since v2.8.0:\n     * - If a callback returns a function, it will be invoked when\n     *   the state is exited in the same manner as if an {@link #statebotfsmonexiting .onExiting()}\n     *   handler was created using it.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {object|function} transitions\n     *  Configuration in the form of an object, or a function that\n     *  returns an object. If a function is used, there will be a single\n     *  argument passed-in: an object with the following methods\n     *  attached as a convenience:\n     *\n     *  - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}\n     *\n     * @returns {function} A function that removes all listeners added\n     *  by this method.\n     *\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.onTransitions({\n     *   'idle -> sending': () => {\n     *     sendData()\n     *       .then(machine.Enter('done', 'sent'))\n     *       .catch(machine.Enter('done', 'failed'))\n     *   },\n     *   'idle -> receiving': () => {\n     *     receiveData()\n     *       .then(machine.Enter('done', 'received'))\n     *       .catch(machine.Enter('done', 'failed'))\n     *   },\n     *   'sending | receiving -> done': whatHappened => {\n     *     console.log('All finished: ', whatHappened)\n     *   }\n     * })\n     *\n     * machine.enter('sending')\n     *\n     * function sendData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     *\n     * function receiveData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     *\n     * @example\n     * // The above example using a function for config\n     * machine.onTransitions(({ Enter }) => ({\n     *   'idle -> sending': () => {\n     *     sendData()\n     *       .then(Enter('done', 'sent'))\n     *       .catch(Enter('done', 'failed'))\n     *   },\n     *   'idle -> receiving': () => {\n     *     receiveData()\n     *       .then(Enter('done', 'received'))\n     *       .catch(Enter('done', 'failed'))\n     *   },\n     *   'sending | receiving -> done': whatHappened => {\n     *     console.log('All finished: ', whatHappened)\n     *   }\n     * }))\n     *\n     * // etc...\n     */\n    onTransitions: transitions => applyHitcher(transitions, 'onTransitions'),\n\n    /**\n     * Pause the machine. {@link #statebotfsmemit|.emit()} and {@link #statebotfsmenter|.enter()} will be no-ops until\n     * the machine is {@link #statebotfsmresume|.resume()}'d.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     */\n    pause,\n\n    /**\n     * Returns `true` if the machine is {@link #statebotfsmpause|.pause()}'d\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {boolean}\n     */\n    paused,\n\n    /**\n     * Perform transitions when events happen.\n     *\n     * Use `then` to optionally add callbacks to those transitions.\n     *\n     * Since v2.8.0:\n     * - If a `then` method returns a function, it will be invoked when\n     *   the state is exited in the same manner as if an {@link #statebotfsmonexiting .onExiting()}\n     *   handler was created using it.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {object|function} transitions\n     *  Configuration in the form of an object, or a function that\n     *  returns an object. If a function is used, there will be a single\n     *  argument passed-in: an object with the following methods\n     *  attached as a convenience:\n     *\n     *  - {{@link #statebotfsmenter|.enter()}, {@link #statebotfsmemit|.emit()}, {@link #enter-state-1 .Enter()}, {@link #emit-name .Emit()}}\n     *\n     * @returns {function} A function that removes all listeners added\n     *  by this method.\n     *\n     * @example\n     * var machine = Statebot('complex-form', {\n     *   chart: `\n     *     idle ->\n     *       update\n     *\n     *     // Maybe things take a long time...\n     *     update ->\n     *       waiting -> waiting-a-while\n     *\n     *     // Which path will we take?\n     *     waiting | waiting-a-while ->\n     *       success | failed | timeout\n     *\n     *     // All done!\n     *     success | failed | timeout ->\n     *       done\n     *   `\n     * })\n     *\n     * machine.performTransitions(({ Enter, emit }) => ({\n     *   'idle -> update': {\n     *     on: 'user-saved',\n     *     then: (data) => {\n     *       console.log('Sending data: ', data)\n     *\n     *       sendData(data)\n     *         .then(Enter('success'))\n     *         .catch(Enter('failed'))\n     *\n     *       emit('data-sent')\n     *     }\n     *   },\n     *   'update -> waiting': {\n     *     on: 'data-sent',\n     *     then: () => {\n     *       setTimeout(Enter('waiting-a-while'), 750)\n     *       setTimeout(Enter('timeout'), 5000)\n     *     }\n     *   }\n     * }))\n     *\n     * // Just to illustrate that you can mix n' match with onTransitions:\n     * machine.onTransitions({\n     *   'waiting | waiting-a-while -> success': () => {\n     *     console.log('Lovely!')\n     *   },\n     *   'waiting | waiting-a-while -> timeout': () => {\n     *     console.log('Well, at least you have your shoes')\n     *   }\n     * })\n     *\n     * machine.emit('user-saved', ['some', 'data'])\n     * // Sending data: [\"some\", \"data\"]\n     *\n     * function sendData() {\n     *   return new Promise((resolve, reject) => {\n     *     setTimeout(resolve, 1000)\n     *     setTimeout(reject, 750 + Math.round(Math.random() * 750))\n     *   })\n     * }\n     */\n    performTransitions: transitions => applyHitcher(transitions, 'performTransitions'),\n\n    /**\n     * Returns the previous state.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @returns {string|undefined}\n     *  The previous state, or `undefined` if there isn't one (ie; you\n     *  have just called {@link #statebotfsmreset|.reset()}, or the\n     *  machine has just started.)\n     *\n     * @example\n     * var machine = Statebot('simple-sender', {\n     *   chart: `\n     *     idle -> sending -> done\n     *   `\n     * })\n     *\n     * machine.enter('sending')\n     * machine.previousState()\n     * // \"idle\"\n     */\n    previousState,\n\n    /**\n     * Returns the state-machine to its starting-state and clears the\n     * state-history.\n     *\n     * All listeners will still be attached, but no events or\n     * transitions will be fired. The pause-state will be maintained.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     *\n     * @example\n     * var machine = Statebot('carousel', {\n     *   chart: `\n     *     page-1 ->\n     *     page-2 ->\n     *     page-3 ->\n     *     page-4 -> page-1\n     *   `\n     * })\n     *\n     * machine.enter('page-2')\n     * machine.reset()\n     * machine.currentState()\n     * // \"page-1\"\n     */\n    reset,\n\n    /**\n     * Resume a {@link #statebotfsmpause|.pause()}'d machine.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     */\n    resume,\n\n    /**\n     * Return an `array` of states accessible from the state specified.\n     * If no state is passed-in, the {@link #statebotfsmcurrentstate|.currentState()} is used.\n     *\n     * @memberof statebotFsm\n     * @instance\n     * @function\n     * @param {string} [state] The state to check. {@link #statebotfsmcurrentstate|.currentState()}\n     *  if unspecified.\n     * @returns {String[]}\n     * @example\n     * var machine = Statebot('half-duplex', {\n     *   chart: `\n     *     idle -> sending | receiving -> done\n     *   `\n     * })\n     *\n     * machine.statesAvailableFromHere()\n     * // [\"sending\", \"receiving\"]\n     *\n     * machine.statesAvailableFromHere('receiving')\n     * // [\"done\"]\n     */\n    statesAvailableFromHere\n  }\n}\n\nfunction decomposeHitcherActions (hitcherActions) {\n  // For: performTransitions()\n  const transitionsForEvents = {}\n\n  // For: onTransitions()\n  const transitionsOnly = []\n\n  Object\n    .entries(hitcherActions)\n    .map(([routeChart, actionFnOrConfigObj]) => {\n      if (isFunction(actionFnOrConfigObj)) {\n        transitionsOnly.push({ routeChart, action: actionFnOrConfigObj })\n        return\n      }\n      if (!isPojo(actionFnOrConfigObj)) {\n        return\n      }\n\n      const { on: _on, then: _then } = actionFnOrConfigObj\n      const hasValidEventNames = isString(_on) || isArray(_on)\n      if (hasValidEventNames) {\n        const eventNames = [_on].flat()\n        eventNames.map(name => {\n          transitionsForEvents[name] = transitionsForEvents[name] || []\n          transitionsForEvents[name].push({ routeChart, action: _then })\n        })\n        return\n      }\n\n      // Behave like onTransitions() if a \"then\" is specified but\n      // there is no \"on\" event that triggers it\n      if (isFunction(_then)) {\n        transitionsOnly.push({ routeChart, action: actionFnOrConfigObj })\n      }\n    })\n\n  return { transitionsForEvents, transitionsOnly }\n}\n\nfunction expandTransitions (configs, canWarn) {\n  const allStates = []\n  const allRoutes = []\n\n  const _configs = configs.reduce((acc, config) => {\n    const { routeChart, action } = config\n    const { states, routes, transitions } = decomposeChart(routeChart)\n    if (canWarn()) {\n      allStates.push(...states)\n      allRoutes.push(...routes)\n    }\n    return [\n      ...acc,\n      ...transitions.map(([fromState, toState]) =>\n        ({ fromState, toState, action })\n      )\n    ]\n  }, [])\n\n  return {\n    configs: _configs,\n    states: allStates,\n    routes: allRoutes\n  }\n}\n\n/**\n * Tests that an object is a {@link #statebotfsm|statebotFsm}.\n *\n * @memberof statebot\n * @function\n * @example\n * var machine = Statebot(...)\n *\n * isStatebot(machine)\n * // true\n *\n * @param {any} object The object to test.\n * @returns {boolean}\n */\n\nfunction isStatebot (object) {\n  return (\n    isPojo(object) &&\n    typeof object.__STATEBOT__ === 'number'\n  )\n}\n","\n//\n// STATEBOT ASSERTION HELPERS\n//\n\nexport {\n  routeIsPossible,\n  assertRoute\n}\n\nimport { isStatebot } from './statebot'\nimport { decomposeRoute } from './parsing'\nimport { isTemplateLiteral, ArgTypeError } from './types'\nimport {\n  Defer,\n  Once,\n  Revokable,\n  Logger,\n} from './utils'\n\nconst argTypeError = ArgTypeError('statebot.')\n\n/**\n * Assert that a certain route can be followed by a\n * {@link #statebotfsm|statebotFsm}.\n *\n * This merely tests that a certain path can be taken through a\n * state-machine. It doesn't assert that the states are moved-through\n * while the machine is working, as with\n * {@link #statebotassertroute|assertRoute()}.\n *\n * @memberof statebot\n * @function\n * @param {statebotFsm} machine\n *  The machine to test the route on.\n * @param {string|string[]} route\n *  The route to test as an arrow-delimited string:\n *\n *  `\n *  \"idle -> pending -> success -> done\"\n *  `\n * @returns {boolean}\n *\n * @example\n * var machine = Statebot(...)\n *\n * routeIsPossible(machine,\n *   'walking -> falling -> splatting -> walking'\n * )\n * // false\n */\n\nfunction routeIsPossible (machine, route) {\n  const err = argTypeError('routeIsPossible',\n    { machine: isStatebot, route: isTemplateLiteral },\n    machine, route\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  const _route = decomposeRoute(route)\n  return _route.every((state, index) => {\n    if (index === _route.length - 1) {\n      return true\n    } else {\n      const nextState = _route[index + 1]\n      const availableStates = machine.statesAvailableFromHere(state)\n      const passes = availableStates.includes(nextState)\n      return passes\n    }\n  })\n}\n\nlet assertionId = 0\n\n/**\n * {@link #statebotassertroute|assertRoute()} options.\n * @typedef {Object} assertRouteOptions\n * @property {string} [description]\n *  Describe the success-condition for this assertion.\n * @property {string} [fromState=\"\"]\n *  Wait for the machine to be in this state before assertion begins.\n * @property {function} [run]\n *  Run this function just before starting the assertion.\n * @property {number} [permittedDeviations=0]\n *  If we hit an unexpected state during assertion, this is a \"deviation\".\n *  It might be that the FSM will come back to the expected state again\n *  after a certain number of these. For example, if your FSM has a\n *  \"retry\" route configured, this number can account for it.\n * @property {number} [timeoutInMs=1000]\n *  Permitted length of time for the entire assertion, in milliseconds.\n * @property {number} [logLevel=3]\n *  Normally we want logs for assertions, right? Well, you can tune\n *  them just like you can with {@link #statebotoptions|statebotOptions}.\n */\n\n/**\n * Assert that a {@link #statebotfsm|statebotFsm} traced the route specified.\n *\n * Whereas {@link #statebotrouteispossible|routeIsPossible()} only checks\n * that a particular route can be followed, `assertRoute` will hook-into\n * a machine and wait for it to trace the specified path within a\n * timeout period.\n *\n * @memberof statebot\n * @function\n * @async\n * @param {statebotFsm} machine\n *  The machine to run the assertion on.\n * @param {string|string[]} expectedRoute\n *  The expected route as an arrow-delimited string:\n *\n *  `\n *  \"idle -> pending -> success -> done\"\n *  `\n * @param {assertRouteOptions} [options]\n * @returns {Promise}\n *\n * @example\n * var machine = Statebot(...)\n *\n * assertRoute(\n *   machine, 'prepare -> debounce -> sending -> done -> idle',\n *   {\n *     description: 'Email sent with no issues',\n *     fromState: 'idle',\n *     timeoutInMs: 1000 * 20,\n *     permittedDeviations: 0,\n *     logLevel: 3\n *   }\n * )\n * .then(() => console.log('Assertion passed!'))\n * .catch(err => console.error(`Whoops: ${err}`))\n *\n * machine.enter('idle')\n */\n\nfunction assertRoute (machine, expectedRoute, options) {\n  const err = argTypeError('assertRoute',\n    { machine: isStatebot, expectedRoute: isTemplateLiteral },\n    machine, expectedRoute\n  )\n  if (err) {\n    throw TypeError(err)\n  }\n\n  assertionId += 1\n\n  const {\n    description = 'Assertion complete',\n    fromState = '',\n    run = () => {},\n    permittedDeviations = 0,\n    timeoutInMs = 1000,\n    logLevel = 3\n  } = options || {}\n\n  const console = Logger(logLevel)\n\n  const prefix = `Statebot[${machine.name()}]: aId<${assertionId}>`\n  const route = decomposeRoute(expectedRoute)\n\n  console.log(`\\n${prefix}: Asserting route: [${route.join(' > ')}]`)\n  console.log(`${prefix}: > Assertion will start from state: \"${fromState}\"`)\n\n  const fromStateActionFn = Defer(run)\n  let removeFromStateActionFn = () => { }\n\n  const totalTimeTaken = TimeTaken()\n  let stateTimeTaken = TimeTaken()\n  let assertionTimeoutTimer\n  let deviations = 0\n  let pending = true\n  let unexpected = false\n\n  const consumeRoute = [...route]\n  const report = Table(\n    ['state', 'expected', 'info', 'took'],\n    ['center', 'center', 'left', 'right']\n  )\n\n  const finaliseReport = Once(err => {\n    addRow('', '', '', 'TOTAL: ' + totalTimeTaken())\n    report.lock()\n    console.log(`\\n${prefix}: ${description}: [${err ? 'FAILED' : 'SUCCESS'}]`)\n    console.table(report.content())\n    return err\n  })\n\n  const { addRow } = report\n  function enteredState (state) {\n    if (pending) {\n      addRow(state, '-', 'PENDING')\n    } else {\n      const expectedState = consumeRoute[0]\n      if (expectedState === state) {\n        addRow(state, expectedState, unexpected ? 'REALIGNED' : 'OKAY', stateTimeTaken())\n        unexpected = false\n        consumeRoute.shift()\n      } else {\n        addRow(state, expectedState, 'WRONG STATE', stateTimeTaken())\n        unexpected = true\n        deviations += 1\n      }\n      stateTimeTaken = TimeTaken()\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    if (consumeRoute.length === 0) {\n      reject(finaliseReport(new Error('NO ROUTE TO TEST')))\n      return\n    }\n\n    const clearTimeoutAndResolve = (...args) => {\n      clearTimeout(assertionTimeoutTimer)\n      removeFromStateActionFn()\n      removeOnSwitchingListener()\n      resolve(...args)\n    }\n\n    const clearTimeoutAndReject = err => {\n      clearTimeout(assertionTimeoutTimer)\n      removeFromStateActionFn()\n      removeOnSwitchingListener()\n      reject(err)\n    }\n\n    const bailout = message => {\n      while (consumeRoute.length) {\n        const expectedState = consumeRoute.shift()\n        addRow(machine.currentState(), `(${expectedState})`, message)\n        unexpected = false\n      }\n      clearTimeoutAndReject(finaliseReport(new Error(message)))\n    }\n\n    if (machine.inState(fromState)) {\n      pending = false\n      removeFromStateActionFn = fromStateActionFn()\n    }\n\n    const { revoke, fn } = Revokable(state => {\n      assertionTimeoutTimer = setTimeout(() => {\n        revoke()\n        bailout('TIMEOUT')\n      }, timeoutInMs)\n\n      enteredState(state)\n      if (pending && state === fromState) {\n        pending = false\n        removeFromStateActionFn = fromStateActionFn()\n      }\n      if (deviations > permittedDeviations) {\n        revoke()\n        bailout('TOO MANY DEVIATIONS')\n      }\n      if (consumeRoute.length <= 0) {\n        revoke()\n        clearTimeoutAndResolve(finaliseReport())\n      }\n    })\n\n    const removeOnSwitchingListener = machine.onSwitching(fn)\n  })\n}\n\nfunction Table (columns, alignments) {\n  columns = columns || []\n  alignments = alignments || []\n\n  const table = []\n  const alignment = columns.map((_, index) => alignments[index] || 'center')\n\n  let locked = false\n  function lock () {\n    locked = true\n  }\n\n  function addRow (...args) {\n    if (locked) {\n      return\n    }\n    const obj = columns.reduce((acc, col, index) => {\n      const row = args[index] || ''\n      return {\n        ...acc,\n        [col]: row\n      }\n    }, {})\n    table.push(obj)\n  }\n\n  function colSizes () {\n    return table.reduce(\n      (acc, row) => columns.map(\n        (col, index) => Math.max(row[col].length, acc[index])\n      ), columns.map(() => 0)\n    )\n  }\n\n  function content () {\n    const sizes = colSizes()\n    function formatField (value, index) {\n      const size = sizes[index]\n      const align = alignment[index]\n      if (align === 'left') {\n        return value.padEnd(size)\n      }\n      if (align === 'right') {\n        return value.padStart(size)\n      }\n      return value\n    }\n    const output = table.reduce((acc, row) => {\n      const formattedRow = columns.reduce((acc, col, index) => ({\n        ...acc,\n        [col]: formatField(row[col], index)\n      }), {})\n      return [...acc, formattedRow]\n    }, [])\n    return output\n  }\n\n  return {\n    lock: lock,\n    addRow: addRow,\n    content: content\n  }\n}\n\nfunction TimeTaken () {\n  const startTime = Date.now()\n\n  function fmt (num, digits) {\n    return num.toFixed(digits).replace(/\\.0+$/, '')\n  }\n\n  return function () {\n    const duration = Date.now() - startTime\n\n    if (duration < 500) {\n      return `${fmt(duration)} ms`\n    } else if (duration < 5000) {\n      return `${fmt(duration / 1000, 2)} s `\n    } else if (duration < 60000) {\n      return `${fmt(duration / 1000, 1)} s `\n    } else {\n      return `${fmt(duration / 1000 / 60, 1)} m `\n    }\n  }\n}\n"],"names":["n","all","Map","on","t","e","i","get","push","set","off","splice","indexOf","emit","slice","map","isEventEmitter","obj","isObject","isFunction","addListener","removeListener","isArray","Array","isString","isPojo","Object","getPrototypeOf","prototype","isTemplateLiteral","every","typeErrorStringIfFnReturnsFalse","argName","argTypeFn","arg","undefined","name","typeErrorStringIfTypeOfFails","argType","typeErrorStringFromArgument","argMap","index","permittedArgTypes","errorDescs","filter","multipleTypesSpecified","length","shouldError","join","JSON","stringify","ArgTypeError","errPrefix","fnName","typeMap","entries","args","err","signature","keys","wrapEmitter","events","eventName","wrapMap","fn","fnMeta","handleEvent","flat","refCount","delete","uniq","input","reduce","acc","one","defer","timer","setTimeout","clearTimeout","Defer","Once","Revokable","revoke","_fn","result","revoked","Pausables","startPaused","runFnWhenPaused","paused","Pausable","pause","resume","ReferenceCounter","kind","description","expecting","_refs","ref","increase","countOf","decrease","count","Math","max","refs","table","sort","key","toValue","Logger","level","_console","info","log","warn","none","canWarn","canLog","canInfo","console","error","rxCRLF","cxPipe","cxArrow","rxOperators","rxUnsafe","replace","rxLineContinuations","RegExp","rxDisallowedCharacters","rxComment","argTypeError","decomposeRoute","templateLiteral","TypeError","lines","condensedLines","linesOfTokens","tokenisedLines","route","decomposeChart","chart","linesOfRoutes","flatMap","decomposeRouteFromTokens","linesOfTransitions","decomposeTransitionsFromRoute","emptyStateFound","routeKeys","includes","filteredRoutes","filteredStates","transitions","split","routes","states","Boolean","linesFrom","strOrArr","line","output","previousLineHasContinuation","condenseLine","condensedLine","sanitisedLine","test","finalCondensedLine","str","previousStates","fromStates","toStates","fromState","toState","ON_EXITING","ON_ENTERING","ON_EXITED","ON_ENTERED","ON_SWITCHING","ON_SWITCHED","INTERNAL_EVENTS","Statebot","options","logPrefix","logLevel","historyLimit","mitt","startIn","Error","stateHistory","stateHistoryLimit","transitionId","internalEvents","emitInternalEvent","onInternalEvent","cb","statesHandled","routesHandled","eventsHandled","applyHitcher","hitcher","hitcherActions","enter","Enter","Emit","allStates","allRoutes","decomposeHitcherActions","transitionsForEvents","transitionsOnly","eventsMappedToTransitionConfigs","decomposeTransitionsForEvent","transitionConfigs","expandTransitions","allCleanupFns","createEventHandlerForTransition","concat","configs","runThenMethodOnTransition","invalidStates","state","invalidRoutes","config","action","bindActionTo","transitionsAndAction","ifStateThenEnterState","inState","runActionFor","onEvent","eventWasHandled","some","transitionNoOp","actionFn","onExitingState","uninstall","enterExitMethods","previousState","currentState","canTransitionTo","testStates","nextStates","statesAvailableFromHere","_state","trim","_inState","anyOrFn","conditionMatches","fnArgs","_inStateObject","stateObject","match","find","nextRoute","shift","switchMethods","methodName","decreaseRefCount","removeEvent","names","switchMethod","toLowerCase","decreaseRefCounts","curriedArgs","_InState","curriedFnArgs","_InStateObject","InState","reset","message","lastState","prevRoute","availableStates","inspect","logRefCounterInfo","refCounter","__STATEBOT__","history","onEntered","onEntering","onExited","onExiting","onSwitched","onSwitching","onTransitions","performTransitions","routeChart","actionFnOrConfigObj","_on","_then","then","hasValidEventNames","eventNames","_configs","isStatebot","object","routeIsPossible","machine","_route","nextState","passes","assertionId","assertRoute","expectedRoute","run","permittedDeviations","timeoutInMs","prefix","fromStateActionFn","removeFromStateActionFn","totalTimeTaken","TimeTaken","stateTimeTaken","assertionTimeoutTimer","deviations","pending","unexpected","consumeRoute","report","Table","finaliseReport","addRow","lock","content","enteredState","expectedState","Promise","resolve","reject","clearTimeoutAndResolve","removeOnSwitchingListener","clearTimeoutAndReject","bailout","columns","alignments","alignment","_","locked","col","row","colSizes","sizes","formatField","value","size","align","padEnd","padStart","formattedRow","startTime","Date","now","fmt","num","digits","toFixed","duration"],"mappings":"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OK,MAAP;EACD;;EAED,SAASd,6BAAT,OAAgE;EAAA;EAAA,MAAvBuB,UAAuB;EAAA,MAAXC,QAAW;;EAC9D,SAAOD,UAAU,CAAClG,MAAX,CAAkB,UAACC,GAAD,EAAMmG,SAAN;EAAA,wCACpBnG,GADoB,sBAEpBkG,QAAQ,CAAC5J,GAAT,CAAa,UAAA8J,OAAO;EAAA,aAAI,CAACD,SAAD,EAAYC,OAAZ,CAAJ;EAAA,KAApB,CAFoB;EAAA,GAAlB,EAGJ,EAHI,CAAP;EAID;;;ECtKD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAMC,UAAU,GAAG,WAAnB;EACA,IAAMC,WAAW,GAAG,YAApB;EACA,IAAMC,SAAS,GAAG,UAAlB;EACA,IAAMC,UAAU,GAAG,WAAnB;EACA,IAAMC,YAAY,GAAG,aAArB;EACA,IAAMC,WAAW,GAAG,YAApB;EAEA,IAAMC,eAAe,6DAClBF,YADkB,EACH,qBADG,qCAElBC,WAFkB,EAEJ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CA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACID,IAAAA,YAAY,EAAZA,YAjEK;;EAmEL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIjO,IAAAA,IAAI,EAAJA,IAjHK;;EAmHL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI+L,IAAAA,IAAI,EAAJA,IAnKK;;EAqKL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIF,IAAAA,KAAK,EAALA,KAtMK;;EAwML;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIC,IAAAA,KAAK,EAALA,KA3OK;;EA6OL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI0E,IAAAA,OAAO,EAAE;EAAA,uBAAUxF,YAAV;EAAA,KAvQJ;;EAyQL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI5E,IAAAA,IAAI,EAAE;EAAA,aAAMA,KAAI,EAAV;EAAA,KA5SD;;EA8SL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIgK,IAAAA,OAAO,EAAE;EAAA,aAAMA,QAAO,EAAb;EAAA,KApUJ;;EAsUL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI9C,IAAAA,OAAO,EAAPA,OAzYK;;EA2YL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIwC,IAAAA,OAAO,EAAPA,OA/bK;;EAicL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIvO,IAAAA,IAAI,EAAE;EAAA,aAAMA,KAAN;EAAA,KAvdD;;EAydL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIkP,IAAAA,SAAS,EAAE1C,gBAAgB,CAAC3D,UAAD,CAxftB;;EA0fL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIsG,IAAAA,UAAU,EAAE3C,gBAAgB,CAAC7D,WAAD,CA9hBvB;;EAgiBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIsD,IAAAA,OAAO,EAAPA,OAjlBK;;EAmlBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACImD,IAAAA,QAAQ,EAAE5C,gBAAgB,CAAC5D,SAAD,CAjnBrB;;EAmnBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIyG,IAAAA,SAAS,EAAE7C,gBAAgB,CAAC9D,UAAD,CAvpBtB;;EAypBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI4G,IAAAA,UAAU,EAAE3B,aAAa,CAAC5E,WAAD,CAjsBpB;;EAmsBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIwG,IAAAA,WAAW,EAAE5B,aAAa,CAAC7E,YAAD,CAhuBrB;;EAkuBL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEI;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI0G,IAAAA,aAAa,EAAE,uBAAAnI,WAAW;EAAA,aAAI8C,YAAY,CAAC9C,WAAD,EAAc,eAAd,CAAhB;EAAA,KA/zBrB;;EAi0BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACI9D,IAAAA,KAAK,EAALA,KAz0BK;;EA20BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACIF,IAAAA,MAAM,EAANA,MAn1BK;;EAq1BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIoM,IAAAA,kBAAkB,EAAE,4BAAApI,WAAW;EAAA,aAAI8C,YAAY,CAAC9C,WAAD,EAAc,oBAAd,CAAhB;EAAA,KA36B1B;;EA66BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIoF,IAAAA,aAAa,EAAbA,aAn8BK;;EAq8BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI+B,IAAAA,KAAK,EAALA,KA/9BK;;EAi+BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACIhL,IAAAA,MAAM,EAANA,MAx+BK;;EA0+BL;EACJ;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACIsJ,IAAAA,uBAAuB,EAAvBA;EAjgCK,GAAP;EAmgCD;;EAED,SAASnC,uBAAT,CAAkCN,cAAlC,EAAkD;EAEhD,MAAMO,oBAAoB,GAAG,EAA7B;EAGA,MAAMC,eAAe,GAAG,EAAxB;EAEAvL,EAAAA,MAAM,CACH6B,OADH,CACWkJ,cADX,EAEG1L,GAFH,CAEO,kBAAuC;EAAA;EAAA,QAArC+Q,UAAqC;EAAA,QAA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"}